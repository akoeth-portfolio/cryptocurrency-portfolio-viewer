[{"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/Twenty4hChangeInvestmentTotal.js":"1","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/OverviewCurrencies.js":"2","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/Twenty4hChangeByCurrency.js":"3","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/charts/TotalChartDiagramm.js":"4","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/charts/Twenty4hChange.js":"5","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/index.js":"6","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/auxiliary/auxiliaryUserData.js":"7","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/layout/Landing.js":"8","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/layout/Alert.js":"9","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/auth/Login.js":"10","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/input/AddCrypto.js":"11","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/positions/PositionChart.js":"12","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/positions/PositionChartDiagram.js":"13","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/utils/setAuthToken.js":"14","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/navbar/Menu.js":"15","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/OverviewTotal.js":"16","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/Twenty4hChangeInvestmentByCurrencies.js":"17","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/currencies.js":"18","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/positions/Position.js":"19","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/positions.js":"20","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/input/DeductCrypto.js":"21","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/navbar/AccountIcon.js":"22","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/auxiliary/auxiliaryCryptoData.js":"23","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/user.js":"24","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/charts/TotalChart.js":"25","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/auth/Register.js":"26","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/Overview.js":"27","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/navbar/Navbar.js":"28","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/App.js":"29","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/auth.js":"30","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/charts/SparkLine.js":"31","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/charts/SparkLineCharts.js":"32"},{"size":485,"mtime":1609882749328,"results":"33","hashOfConfig":"34"},{"size":5416,"mtime":1610236632180,"results":"35","hashOfConfig":"34"},{"size":1439,"mtime":1609612404210,"results":"36","hashOfConfig":"34"},{"size":5684,"mtime":1610327574694,"results":"37","hashOfConfig":"34"},{"size":1301,"mtime":1610327550686,"results":"38","hashOfConfig":"34"},{"size":197,"mtime":1609170003662,"results":"39","hashOfConfig":"34"},{"size":641,"mtime":1609170003658,"results":"40","hashOfConfig":"34"},{"size":5307,"mtime":1609882840948,"results":"41","hashOfConfig":"34"},{"size":304,"mtime":1609170003658,"results":"42","hashOfConfig":"34"},{"size":1764,"mtime":1609170003658,"results":"43","hashOfConfig":"34"},{"size":3203,"mtime":1609880397301,"results":"44","hashOfConfig":"34"},{"size":947,"mtime":1609170003662,"results":"45","hashOfConfig":"34"},{"size":1026,"mtime":1609170003662,"results":"46","hashOfConfig":"34"},{"size":453,"mtime":1609170003662,"results":"47","hashOfConfig":"34"},{"size":745,"mtime":1609170003658,"results":"48","hashOfConfig":"34"},{"size":2591,"mtime":1610239808698,"results":"49","hashOfConfig":"34"},{"size":1724,"mtime":1609970019833,"results":"50","hashOfConfig":"34"},{"size":6353,"mtime":1610310023139,"results":"51","hashOfConfig":"34"},{"size":3446,"mtime":1609624366781,"results":"52","hashOfConfig":"34"},{"size":305,"mtime":1609170003658,"results":"53","hashOfConfig":"34"},{"size":4644,"mtime":1609370347370,"results":"54","hashOfConfig":"34"},{"size":307,"mtime":1609170003658,"results":"55","hashOfConfig":"34"},{"size":5574,"mtime":1610322713778,"results":"56","hashOfConfig":"34"},{"size":433,"mtime":1609170003658,"results":"57","hashOfConfig":"34"},{"size":1679,"mtime":1609544630204,"results":"58","hashOfConfig":"34"},{"size":2228,"mtime":1609170003658,"results":"59","hashOfConfig":"34"},{"size":3871,"mtime":1610239803486,"results":"60","hashOfConfig":"34"},{"size":941,"mtime":1609268083434,"results":"61","hashOfConfig":"34"},{"size":6075,"mtime":1609955273429,"results":"62","hashOfConfig":"34"},{"size":957,"mtime":1609170003658,"results":"63","hashOfConfig":"34"},{"size":2319,"mtime":1610285833559,"results":"64","hashOfConfig":"34"},{"size":1070,"mtime":1610225599864,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"1m2r51w",{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"68"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"73"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"83"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"73"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"89"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"83"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"73"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"73"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"68"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/Twenty4hChangeInvestmentTotal.js",[],["149","150"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/OverviewCurrencies.js",["151"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/Twenty4hChangeByCurrency.js",[],["152","153"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/charts/TotalChartDiagramm.js",["154","155","156"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/charts/Twenty4hChange.js",["157"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/index.js",[],["158","159"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/auxiliary/auxiliaryUserData.js",[],["160","161"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/layout/Landing.js",["162"],"import React, { Fragment, useState } from \"react\";\nimport { getMarketChartsCrypto2 } from \"../../actions/currencies\";\nimport { getCurrenciesNames } from \"../../auxiliary/auxiliaryCryptoData\";\nimport Overview from \"../overview/Overview\";\nimport TotalChart from \"../charts/TotalChart\";\n\nfunction Landing({ user, cryptoCurrencies, logedin, triggerAlert }) {\n  const [renderOverview, setRenderOverview] = useState(true);\n  const [renderTotalChart, setRenderTotalChart] = useState(false);\n\n  const toggleView = () => {\n    if (renderOverview) {\n      setRenderOverview(false);\n      setRenderTotalChart(true);\n      return;\n    } else {\n      setRenderOverview(true);\n      setRenderTotalChart(false);\n    }\n  };\n\n  const [originAndCurrency, setOriginAndCurency] = useState([]);\n\n  const updateOriginAndCurrencyState = (origin, currency) =>\n    setOriginAndCurency([origin, currency]);\n\n  const [marketChartTotal, setMarketChartTotal] = useState({});\n  const [marketChartDay, setMarketChartDay] = useState({});\n  const [marketChartWeek, setMarketChartWeek] = useState({});\n  const [marketChartMonth, setMarketChartMonth] = useState({});\n  const [currentMarketChart, setCurrentMarketChart] = useState({});\n\n  const [loaded, setLoaded] = useState(false);\n\n  const isEmpty = (obj) => Object.keys(obj).length === 0;\n\n  const upDateMarketChartState = (duration) => {\n    switch (duration) {\n      case \"all_total\":\n        isEmpty(marketChartTotal)\n          ? loadChartData(duration)\n          : setCurrentMarketChart(marketChartTotal);\n        break;\n      case \"day\":\n        isEmpty(marketChartDay)\n          ? loadChartData(duration)\n          : setCurrentMarketChart(marketChartDay);\n        break;\n      case \"week\":\n        isEmpty(marketChartWeek)\n          ? loadChartData(duration)\n          : setCurrentMarketChart(marketChartWeek);\n        break;\n      case \"month\":\n        isEmpty(marketChartMonth)\n          ? loadChartData(duration)\n          : setCurrentMarketChart(marketChartMonth);\n        break;\n      default:\n    }\n\n    function loadChartData(duration) {\n      setLoaded(false);\n      let currenciesObject = {};\n      const currencyNamesArr = getCurrenciesNames(user);\n\n      // api request is beeing conducted in accordance with the number of currencies\n      // if successful the retured data is beeing stored as arrays in currenciesObject (key = currencyName, value = array)\n      // if the number of attributes matches the number of currencies marketCharts and loaded state are updated\n      // if an error is returned by api the state loaded is set to true (so the empty diagram is beeing displayed) and an error message appears\n      currencyNamesArr.forEach(async (currencyName) => {\n        let currentPrice = 0;\n        cryptoCurrencies.data.forEach((obj) => {\n          if (obj.id === currencyName) currentPrice = obj.current_price;\n        });\n        const res = await getMarketChartsCrypto2(\n          user,\n          currencyName,\n          currentPrice,\n          duration\n        );\n\n        if (res instanceof Error) {\n          setLoaded(true);\n          res.response\n            ? triggerAlert(res.response.data)\n            : triggerAlert(\"something went wrong\");\n\n          // this makes sure that currenciesObject only gets attributes if no error occurs so those attributes are proper arrays\n          // otherwhise attributes are non iterable error objects -> a arr.forEach() will throw an exception later in the code and break the app\n          // if api returns errors, currenciesObject remains incomplete and marketCharts state will not be updated\n          // so after the arr.forEach() is done marketCharts state either has valid data or is an empty object (which results in an empty diagram)\n        } else {\n          currenciesObject[currencyName] = res;\n          if (\n            Object.keys(currenciesObject).length === currencyNamesArr.length\n          ) {\n            switch (duration) {\n              case \"all_total\":\n                setMarketChartTotal(currenciesObject);\n                break;\n              case \"day\":\n                setMarketChartDay(currenciesObject);\n                break;\n              case \"week\":\n                setMarketChartWeek(currenciesObject);\n                break;\n              case \"month\":\n                setMarketChartMonth(currenciesObject);\n                break;\n              default:\n            }\n\n            setCurrentMarketChart(currenciesObject);\n\n            setLoaded(true);\n          }\n        }\n      });\n    }\n  };\n\n  return (\n    <Fragment>\n      {renderOverview && (\n        <Overview\n          user={user}\n          cryptoCurrencies={cryptoCurrencies}\n          logedin={logedin}\n          toggleView={toggleView}\n          renderOverview={renderOverview}\n          updateOriginAndCurrencyState={updateOriginAndCurrencyState}\n        />\n      )}\n      {renderTotalChart && (\n        <TotalChart\n          user={user}\n          currentMarketChart={currentMarketChart}\n          logedin={logedin}\n          triggerAlert={triggerAlert}\n          toggleView={toggleView}\n          originAndCurrency={originAndCurrency}\n          loaded={loaded}\n          logedin={logedin}\n          upDateMarketChartState={upDateMarketChartState}\n        />\n      )}\n    </Fragment>\n  );\n}\n\nexport default Landing;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/layout/Alert.js",[],["163","164"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/auth/Login.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/input/AddCrypto.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/positions/PositionChart.js",["165"],"import React, { Fragment, useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { getMarketCharts } from \"../../actions/currencies\";\nimport PositionChartDiagram from \"./PositionChartDiagram\";\n\nconst PositionChart = () => {\n  let data = useLocation();\n\n  const [marketChart, setMarketChart] = useState({});\n\n  useEffect(() => {\n    const updateStates = async () => {\n      const chartData = await getMarketCharts(\n        data.state.currency,\n        data.state.date_of_purchase\n      );\n      setMarketChart(chartData);\n    };\n\n    updateStates();\n  }, []);\n\n  function isEmpty(obj) {\n    return Object.keys(obj).length === 0;\n  }\n\n  return isEmpty(marketChart) ? (\n    <div>Loading ...</div>\n  ) : (\n    <div>\n      <Fragment>\n        <PositionChartDiagram\n          marketChart={marketChart}\n          amount={data.state.amount}\n        />\n      </Fragment>\n    </div>\n  );\n};\n\nexport default PositionChart;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/positions/PositionChartDiagram.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/utils/setAuthToken.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/navbar/Menu.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/OverviewTotal.js",["166"],"import React, { useState, useEffect } from \"react\";\nimport SparkLine from \"../charts/SparkLine\";\nimport Twenty4hChangeInvestmentTotal from \"./Twenty4hChangeInvestmentTotal\";\n\nconst OverviewTotal = ({\n  user,\n  cryptoCurrencies,\n  totalPurchase,\n  currentValueTotal,\n  prevCurrentValueTotal,\n  get24hourChangeTotal,\n  handleClick,\n}) => {\n  // both hooks are neccessary to persist change currentValueTotal so it survives re mounting of this component\n  const [currentValueTotalChange, setCurrentValueTotalChange] = useState(\n    sessionStorage.getItem(\"change\")\n  );\n\n  useEffect(() => {\n    const change = (currentValueTotal - prevCurrentValueTotal.current).toFixed(\n      2\n    );\n    // makes sure that session storage and state are only updated if it is not a re mount\n    if (!isNaN(change) && prevCurrentValueTotal.current !== 0) {\n      sessionStorage.setItem(\"change\", change);\n      setCurrentValueTotalChange(change);\n    }\n  }, [currentValueTotal]);\n\n  return (\n    <tr id=\"overview_total\">\n      <th scope=\"row\"></th>\n\n      <td></td>\n\n      {/* initial value */}\n      <td onClick={() => handleClick(\"initial_value\", \"all_currencies\")}>\n        {totalPurchase.toFixed(2)}&euro;\n      </td>\n\n      {/* current value */}\n      <td onClick={() => handleClick(\"current_value\", \"all_currencies\")}>\n        <div className=\"change_container\">\n          <div>{currentValueTotal.toFixed(2)}&euro;</div>\n          <div\n            className=\"change_value\"\n            style={{\n              color: currentValueTotalChange >= 0 ? \"green\" : \"red\",\n            }}\n          >\n            {currentValueTotalChange && currentValueTotalChange !== 0\n              ? currentValueTotalChange\n              : 0}\n            &euro;\n          </div>\n        </div>\n\n        <Twenty4hChangeInvestmentTotal\n          get24hourChangeTotal={get24hourChangeTotal}\n        />\n      </td>\n\n      {/* profit */}\n      <td onClick={() => handleClick(\"balance\", \"all_currencies\")}>\n        {(currentValueTotal - totalPurchase).toFixed(2)}&euro;\n      </td>\n\n      {/* roi */}\n      <td onClick={() => handleClick(\"roi\", \"all_currencies\")}>\n        <div className=\"x_container\">\n          <div>\n            {((currentValueTotal * 100) / totalPurchase - 100).toFixed(0)}%\n          </div>\n          <div className=\"x_value\">\n            ({(currentValueTotal / totalPurchase).toFixed(1)}\n            x)\n          </div>\n        </div>\n      </td>\n\n      {/* sparkline */}\n      <td>\n        <SparkLine user={user} cryptoCurrencies={cryptoCurrencies} />\n      </td>\n    </tr>\n  );\n};\n\nexport default OverviewTotal;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/Twenty4hChangeInvestmentByCurrencies.js",[],["167","168"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/currencies.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/positions/Position.js",["169","170"],"import React, { Fragment, useEffect } from \"react\";\nimport { getCurrencyPositions } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { useLocation } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\n\nfunction Position() {\n  const data = useLocation();\n\n  useEffect(() => {\n    if (data.current_price != undefined) {\n      sessionStorage.setItem(\"crypto_inv_current_price\", data.current_price);\n    }\n  }, []);\n\n  const transformDate = (val) => {\n    const date = new Date(val);\n    const day =\n      date.getDate() < 10 ? \"0\" + date.getDate() : \"\" + date.getDate();\n    const month = date.toLocaleString(\"default\", { month: \"long\" });\n    const year = date.getFullYear();\n    const dateString = `${day}. ${month} ${year}`;\n    return dateString;\n  };\n\n  const getSortedPositions = () => {\n    const positionsArray = getCurrencyPositions(\n      data.state.user,\n      data.state.currency\n    );\n    const sortedArray = positionsArray.sort(\n      (a, b) => Date.parse(b.date_of_purchase) - Date.parse(a.date_of_purchase)\n    );\n    return sortedArray;\n  };\n\n  return (\n    <Fragment>\n      <div>\n        current price per coin:\n        {data.current_price ||\n          sessionStorage.getItem(\"crypto_inv_current_price\")}{\" \"}\n        {data.state.user.positions[0].fiat_currency}\n      </div>\n      <div className=\"row\">\n        {getSortedPositions().map((position) => {\n          return (\n            <Link\n              id=\"position\"\n              to={{\n                pathname: \"/position_chart\",\n                state: {\n                  currency: position.crypto_currency,\n                  date_of_purchase: position.date_of_purchase,\n                  amount: position.amount,\n                },\n              }}\n            >\n              <div className=\"col\">amount: {position.amount}</div>\n              <div className=\"col\">\n                price per coin at time of purchase:\n                {(position.price / position.amount).toFixed(2)}\n              </div>\n              <div className=\"col\">\n                purchase date:\n                {/* {position.date_of_purchase.split(\"T\").slice(0, 1).join(\"\")} */}\n                {transformDate(position.date_of_purchase)}\n              </div>\n              <div className=\"col\">\n                initial value:\n                {position.price}\n                {position.fiat_currency}\n              </div>\n              <div className=\"col\">\n                current value:\n                {data.current_price === undefined\n                  ? (\n                      sessionStorage.getItem(\"crypto_inv_current_price\") *\n                      position.amount\n                    ).toFixed(2)\n                  : (data.current_price * position.amount).toFixed(2)}\n                {position.fiat_currency}\n              </div>\n\n              <div className=\"col\">\n                balance:\n                {data.current_price === undefined\n                  ? (\n                      sessionStorage.getItem(\"crypto_inv_current_price\") *\n                        position.amount -\n                      position.price\n                    ).toFixed(2)\n                  : (\n                      data.current_price * position.amount -\n                      position.price\n                    ).toFixed(2)}\n                {position.fiat_currency}\n              </div>\n            </Link>\n          );\n        })}\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Position;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/positions.js",[],["171","172"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/input/DeductCrypto.js",["173"],"import React, { useState, useEffect } from \"react\";\nimport { getAmount } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getCurrenciesNames } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getInitialValue } from \"../../auxiliary/auxiliaryCryptoData\";\n\n// import { getLatestCryptoPrice } from \"../../actions/currencies\";\n\nconst DeductCrypto = ({ user, makePosition, loadUserObj, triggerAlert }) => {\n  const [formData, setFormData] = useState({\n    crypto_currency: \"\",\n    amount: \"\",\n    date_of_purchase: \"\",\n  });\n\n  const { crypto_currency, amount, date_of_purchase } = formData;\n\n  const [currencyNames, setCurrencyNames] = useState([]);\n\n  useEffect(() => {\n    const namesArr = getCurrenciesNames(user);\n    namesArr.unshift(\"\");\n    setCurrencyNames(namesArr);\n  }, []);\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n\n    // user input validation\n    if (!crypto_currency) {\n      triggerAlert(\"Please select a cryptocurrency\", \"danger\");\n      return;\n    }\n\n    const currentAmount = getAmount(user, crypto_currency);\n\n    if (amount > currentAmount) {\n      triggerAlert(\n        `You have only ${currentAmount} unit(s) of this currency`,\n        \"danger\"\n      );\n      return;\n    }\n\n    // value of the amount (in fiat) to be deducted from the amount of a crypto currency in the portfolio is calculated based on the median value\n    // of all positions of this currency\n    const median_price =\n      (getInitialValue(user, crypto_currency) /\n        getAmount(user, crypto_currency)) *\n      amount;\n\n    formData.price = median_price * -1;\n\n    // amount is beeing turned into negative so the corresponding position has a negative amount property\n    formData.amount = parseFloat(formData.amount) * -1;\n    formData.fiat_currency = user.positions[0].fiat_currency;\n\n    // formData.fiat_currency = e.target.querySelector(\n    //   \"#deduct_select_fiat\"\n    // ).value;\n    // formData.price *= -1;\n\n    await makePosition(formData);\n    setFormData({\n      crypto_currency: \"\",\n      amount: \"\",\n      date_of_purchase: \"\",\n    });\n    loadUserObj();\n  };\n\n  return (\n    <div className=\"form_container\">\n      <h3 className=\"large text-primary\">Deduct Crypto</h3>\n      <p className=\"lead\">Deduct cryptocurrency from your portfolio</p>\n      <form className=\"form\" onSubmit={(e) => onSubmit(e)}>\n        <div className=\"form-group\">\n          <div className=\"dropdown input_field\">\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n              }}\n            >\n              <div>Select a cryptocurrency</div>\n              <select\n                className=\"btn btn-outline-secondary\"\n                name=\"crypto_currency\"\n                style={{ position: \"absolute\", right: \"0\", width: \"50%\" }}\n                onChange={(e) => onChange(e)}\n              >\n                {currencyNames.map((currencyName) => {\n                  return (\n                    <option value={`${currencyName}`}>{currencyName}</option>\n                  );\n                })}\n              </select>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"form-group\">\n          <input\n            className=\"form-control input_field\"\n            type=\"number\"\n            placeholder=\"Amount\"\n            name=\"amount\"\n            value={amount}\n            onChange={(e) => onChange(e)}\n            required\n          />\n        </div>\n\n        {/* <div className=\"input-group input_field\">\n          <input\n            className=\"form-control\"\n            type=\"number\"\n            min=\"1\"\n            step=\"any\"\n            placeholder=\"Value of amount\"\n            name=\"price\"\n            value={price}\n            onChange={(e) => onChange(e)}\n            required\n          />\n          <div className=\"input-group-append\">\n            <select\n              id=\"deduct_select_fiat\"\n              className=\"btn btn-outline-secondary\"\n            >\n              <option value=\"EUR\">EUR</option>\n              <option value=\"USD\">USD</option>\n            </select>\n          </div>\n        </div> */}\n\n        <div className=\"form-group\">\n          <input\n            className=\"form-control input_field\"\n            type=\"date\"\n            name=\"date_of_purchase\"\n            value={date_of_purchase}\n            onChange={(e) => onChange(e)}\n            required\n          />\n        </div>\n\n        <input type=\"submit\" className=\"btn btn-primary\" value=\"Deduct\" />\n      </form>\n    </div>\n  );\n};\n\nexport default DeductCrypto;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/navbar/AccountIcon.js",["174"],"import React, { Fragment } from \"react\";\nimport Menu from \"./Menu\";\n\nconst AccountIcon = ({ logout, logedin }) => {\n  return (\n    <div id=\"account_nav_item\">\n      account\n      <div id=\"menu\">\n        <Menu logout={logout} logedin={logedin} />\n      </div>\n    </div>\n  );\n};\n\nexport default AccountIcon;\n",["175","176"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/auxiliary/auxiliaryCryptoData.js",["177","178","179","180"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/user.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/charts/TotalChart.js",["181"],"import React, { useEffect } from \"react\";\nimport TotalChartDiagramm from \"./TotalChartDiagramm\";\n\nfunction TotalChart({\n  user,\n  currentMarketChart,\n  toggleView,\n  originAndCurrency,\n  loaded,\n  duration,\n  upDateMarketChartState,\n  logedin,\n}) {\n  useEffect(() => {\n    if (logedin) upDateMarketChartState(\"all_total\");\n  }, [user]);\n\n  return !loaded ? (\n    <div>Loading ...</div>\n  ) : (\n    <div id=\"total_chart_container\">\n      <div id=\"toggle_view\" onClick={toggleView}>\n        go back\n      </div>\n      <div id=\"durations_container\">\n        <div\n          id={duration === \"day\" && \"duration\"}\n          className=\"durations\"\n          onClick={() => upDateMarketChartState(\"day\")}\n        >\n          day\n        </div>\n        <div\n          id={duration === \"week\" && \"duration\"}\n          className=\"durations\"\n          onClick={() => upDateMarketChartState(\"week\")}\n        >\n          week\n        </div>\n        <div\n          id={duration === \"month\" && \"duration\"}\n          className=\"durations\"\n          onClick={() => upDateMarketChartState(\"month\")}\n        >\n          month\n        </div>\n        <div\n          id={duration === \"all_total\" && \"duration\"}\n          className=\"durations\"\n          onClick={() => upDateMarketChartState(\"all_total\")}\n        >\n          all\n        </div>\n      </div>\n      <div>\n        <TotalChartDiagramm\n          user={user}\n          currentMarketChart={currentMarketChart}\n          positions={user.positions}\n          fiat={user.positions[0].fiat_currency}\n          originAndCurrency={originAndCurrency}\n          duration={duration}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default TotalChart;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/auth/Register.js",["182","183"],"import React, { useState } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\n\nconst Register = ({ logedin, signup }) => {\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    password2: \"\",\n  });\n\n  const { firstname, lastname, email, password, password2 } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    signup(email, password, password2);\n  };\n\n  // if some nasty user enters .../login in url --> redirect to landing page\n  // otherwhise the register form could be displayed to a logged in user\n  if (logedin) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <div className=\"form_container\">\n      <h3 className=\"large text-primary\">Sign Up</h3>\n      <p className=\"lead\">\n        <i className=\"fa fa-user auth_fa-user\"></i> Create your account\n      </p>\n      <form className=\"form\" onSubmit={(e) => onSubmit(e)}>\n        <div className=\"form-group\">\n          <input\n            className=\"form-control input_field\"\n            type=\"email\"\n            placeholder=\"Email Address\"\n            name=\"email\"\n            value={email}\n            onChange={(e) => onChange(e)}\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            className=\"form-control input_field\"\n            type=\"password\"\n            placeholder=\"Password\"\n            name=\"password\"\n            value={password}\n            onChange={(e) => onChange(e)}\n            minLength=\"6\"\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            className=\"form-control input_field\"\n            type=\"password\"\n            placeholder=\"Confirm Password\"\n            name=\"password2\"\n            value={password2}\n            onChange={(e) => onChange(e)}\n            minLength=\"6\"\n            required\n          />\n        </div>\n        <input type=\"submit\" className=\"btn btn-primary\" value=\"Register\" />\n      </form>\n      <p className=\"my-1\">\n        Already have an account? <Link to=\"/login\">Sign In</Link>\n      </p>\n    </div>\n  );\n};\n\nexport default Register;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/Overview.js",["184","185","186"],"import React, { useState, useEffect, useRef } from \"react\";\nimport OverviewCurrencies from \"./OverviewCurrencies\";\nimport OverviewTotal from \"./OverviewTotal\";\nimport { getNamesAndCurrentValues } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getCurrentValue } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getInitialValue } from \"../../auxiliary/auxiliaryCryptoData\";\n\nconst Overview = ({\n  user,\n  cryptoCurrencies,\n  logedin,\n  toggleView,\n  renderOverview,\n  updateOriginAndCurrencyState,\n}) => {\n  const [\n    currencyNamesAndCurrentValues,\n    setCurrencyNamesAndCurrentValues,\n  ] = useState([]);\n\n  const [currentValueTotal, setCurrentValueTotal] = useState(0);\n\n  const [totalPurchase, setTotalPurchase] = useState(0);\n\n  useEffect(() => {\n    if (logedin) {\n      const namesAndCurrentValuesArr = getNamesAndCurrentValues(\n        user,\n        cryptoCurrencies\n      );\n\n      setCurrencyNamesAndCurrentValues(namesAndCurrentValuesArr);\n\n      const totalsArray = namesAndCurrentValuesArr.map(\n        ([currencyName, currencyValue]) =>\n          getCurrentValue(user, cryptoCurrencies, currencyName)\n      );\n\n      setCurrentValueTotal(totalsArray.reduce((a, b) => a + b, 0));\n\n      setTotalPurchase(getInitialValuePurchase());\n    }\n  }, [user, cryptoCurrencies, logedin, renderOverview]);\n\n  // useRef preserve previous currentValue over re-render\n  const prevCurrentValueTotal = useRef(0);\n\n  const prevCurrentValues = useRef({});\n\n  useEffect(() => {\n    prevCurrentValueTotal.current = currentValueTotal;\n\n    currencyNamesAndCurrentValues.map((el) => {\n      const currVal = getCurrentValue(user, cryptoCurrencies, el[0]);\n      prevCurrentValues.current[el[0]] = currVal;\n    });\n  }, [currentValueTotal]);\n\n  const getInitialValuePurchase = () => {\n    let sum = 0;\n    if (user) user.positions.forEach((position) => (sum += position.price));\n    return sum;\n  };\n\n  const get24hourChangeByCurrency = (currencyName) => {\n    let returnValue = 0;\n\n    if (cryptoCurrencies.data) {\n      cryptoCurrencies.data.forEach((el) => {\n        if (el.id === currencyName) {\n          returnValue = el.price_change_percentage_24h;\n        }\n      });\n    }\n    return returnValue;\n  };\n\n  const get24hourChangeTotal = () => {\n    let sum = 0;\n    currencyNamesAndCurrentValues.forEach((arr) => {\n      sum +=\n        (get24hourChangeByCurrency(arr[0]) *\n          getCurrentValue(user, cryptoCurrencies, arr[0])) /\n        100;\n    });\n\n    return sum;\n  };\n\n  const handleClick = (origin, currency) => {\n    toggleView();\n    updateOriginAndCurrencyState(origin, currency);\n  };\n\n  return (\n    <div>\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Crypto</th>\n            <th scope=\"col\">Amount</th>\n            <th scope=\"col\">Initial Value</th>\n            <th scope=\"col\">Current Value</th>\n            <th scope=\"col\">Profit</th>\n            <th scope=\"col\">ROI</th>\n            <th scope=\"col\">Last 7 Days</th>\n          </tr>\n        </thead>\n        <OverviewCurrencies\n          user={user}\n          cryptoCurrencies={cryptoCurrencies}\n          currencyNamesAndCurrentValues={currencyNamesAndCurrentValues}\n          prevCurrentValues={prevCurrentValues}\n          getInitialValue={getInitialValue}\n          get24hourChangeByCurrency={get24hourChangeByCurrency}\n          getCurrentValue={getCurrentValue}\n          handleClick={handleClick}\n          logedin={logedin}\n        />\n        <OverviewTotal\n          user={user}\n          cryptoCurrencies={cryptoCurrencies}\n          totalPurchase={totalPurchase}\n          currentValueTotal={currentValueTotal}\n          prevCurrentValueTotal={prevCurrentValueTotal}\n          get24hourChangeTotal={get24hourChangeTotal}\n          handleClick={handleClick}\n        />\n      </table>\n    </div>\n  );\n};\n\nexport default Overview;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/navbar/Navbar.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/App.js",["187","188"],"import React, { Fragment, useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { createPosition } from \"./actions/positions\";\nimport { getCurrenciesNames } from \"./auxiliary/auxiliaryCryptoData\";\nimport { getLatestCryptoData } from \"./actions/currencies\";\nimport { loadUser } from \"./auxiliary/auxiliaryUserData\";\nimport { signin } from \"./auxiliary/auxiliaryUserData\";\nimport { signout } from \"./auxiliary/auxiliaryUserData\";\nimport { signup } from \"./auxiliary/auxiliaryUserData\";\n\nimport Navbar from \"./components/navbar/Navbar\";\nimport Landing from \"./components/layout/Landing\";\nimport Login from \"./components/auth/Login\";\nimport Register from \"./components/auth/Register\";\n\nimport AddCrypto from \"./components/input/AddCrypto\";\nimport DeductCrypto from \"./components/input/DeductCrypto\";\n\nimport Position from \"./components/positions/Position\";\nimport PositionChart from \"./components/positions/PositionChart\";\n\nimport Alert from \"./components/layout/Alert\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const [user, setUser] = useState({});\n\n  const [logedin, setLogedin] = useState(false);\n\n  const [alert, setAlert] = useState({});\n\n  const [cryptoCurrencies, setCryptoCurrencies] = useState({});\n\n  useEffect(() => {\n    loadUserObj();\n  }, []);\n\n  useEffect(() => {\n    updateCryptoCurrenciesState();\n  }, [logedin]);\n\n  const updateCryptoCurrenciesState = async () => {\n    if (logedin) {\n      const currencyNames = getCurrenciesNames(user);\n\n      setInterval(() => {\n        update();\n      }, 120000);\n\n      const update = async () => {\n        const crypto = await getLatestCryptoData(currencyNames);\n        if (crypto instanceof Error) {\n          triggerAlert(\"Something went wrong\", \"danger\");\n        } else {\n          setCryptoCurrencies(crypto);\n        }\n      };\n\n      update();\n    }\n  };\n\n  // const getDataStream = () => {\n  //   if (Object.keys(cryptoCurrencies).length > 0) {\n  //     cryptoCurrencies.data.forEach((obj) => {\n  //       const binanceSocket = new WebSocket(\n  //         `wss://stream.binance.com:9443/ws/${obj.symbol}usdt@trade`\n  //       );\n  //       binanceSocket.onmessage = function (e) {\n  //         const messageObj = JSON.parse(e.data);\n  //         cryptoCurrencies.data.forEach((obj, index) => {\n  //           if (messageObj.s.includes(obj.symbol.toUpperCase())) {\n  //             setCryptoCurrencies({\n  //               ...(cryptoCurrencies,\n  //               (cryptoCurrencies.data[index].current_price = parseFloat(\n  //                 messageObj.p\n  //               ))),\n  //             });\n  //           }\n  //         });\n  //       };\n  //     });\n  //   }\n  // };\n\n  const makePosition = async (formData) => {\n    const position = await createPosition(formData);\n    if (position instanceof Error) {\n      triggerAlert(position.response.data.errors.msg, \"danger\");\n    } else {\n      position.data.amount < 0\n        ? triggerAlert(\"Amount deducted\", \"success\")\n        : triggerAlert(\"Position added\", \"success\");\n      setUser({ ...user.positions.unshift(position.data) });\n      updateCryptoCurrenciesState();\n    }\n  };\n\n  const login = async (email, password) => {\n    const token = await signin(email, password);\n    if (token instanceof Error) {\n      triggerAlert(token.response.data.errors.msg, \"danger\");\n    } else {\n      loadUserObj();\n    }\n  };\n\n  const loadUserObj = async () => {\n    const userObj = await loadUser();\n    if (userObj instanceof Error) {\n      triggerAlert(userObj.response.data.errors.msg, \"danger\");\n      return;\n    } else if (userObj) {\n      setUser(userObj);\n      setLogedin(true);\n    }\n  };\n\n  const logout = () => {\n    signout();\n    setUser({});\n    setLogedin(false);\n  };\n\n  const register = (email, password, password2) => {\n    const token = signup(email, password, password2);\n    if (token instanceof Error) {\n      triggerAlert(token.response.data.errors.msg, \"danger\");\n    } else {\n      loadUser();\n    }\n  };\n\n  const triggerAlert = (msg, alertType) => {\n    setAlert({\n      message: msg,\n      type: alertType,\n    });\n    setTimeout(() => setAlert({}), 20000);\n  };\n\n  const removeAlert = () => setAlert({});\n\n  return (\n    <Router>\n      <Fragment>\n        <Navbar logout={logout} logedin={logedin} />\n        <Alert alert={alert} removeAlert={removeAlert} />\n        <Switch>\n          {logedin && (\n            <Route\n              exact\n              path=\"/\"\n              render={() => (\n                <Landing\n                  user={user}\n                  cryptoCurrencies={cryptoCurrencies}\n                  logedin={logedin}\n                  triggerAlert={triggerAlert}\n                />\n              )}\n            />\n          )}\n          <Route exact path=\"/position\" render={() => <Position />} />\n          <Route\n            exact\n            path=\"/position_chart\"\n            render={() => <PositionChart />}\n          />\n\n          <Route\n            exact\n            path=\"/login\"\n            render={() => <Login login={login} logedin={logedin} />}\n          />\n          <Route\n            exact\n            path=\"/register\"\n            render={() => <Register register={register} logedin={logedin} />}\n          />\n          {logedin && (\n            <Route\n              exact\n              path=\"/add_crypto\"\n              render={() => (\n                <AddCrypto\n                  makePosition={makePosition}\n                  loadUserObj={loadUserObj}\n                  triggerAlert={triggerAlert}\n                />\n              )}\n            />\n          )}\n\n          {logedin && (\n            <Route\n              exact\n              path=\"/deduct_crypto\"\n              render={() => (\n                <DeductCrypto\n                  makePosition={makePosition}\n                  loadUserObj={loadUserObj}\n                  triggerAlert={triggerAlert}\n                  user={user}\n                />\n              )}\n            />\n          )}\n        </Switch>\n      </Fragment>\n    </Router>\n  );\n};\n\nexport default App;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/auth.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/charts/SparkLine.js",["189"],"import React, { useState, useEffect } from \"react\";\nimport SparkLineCharts from \"./SparkLineCharts\";\nimport { getAmount } from \"../../auxiliary/auxiliaryCryptoData\";\n\nconst SparkLine = ({ user, cryptoCurrencies, currencyName }) => {\n  const [sparkLineData, setSparkLineData] = useState([]);\n\n  useEffect(() => {\n    getSparkLineData();\n  }, [cryptoCurrencies]);\n\n  const getSparkLineData = () => {\n    if (Object.keys(cryptoCurrencies).length > 0) {\n      let sparkLineCurrentValuesTotal = new Array(\n        cryptoCurrencies.data[0].sparkline_in_7d.price.length - 1\n      ).fill(0);\n      if (Object.keys(cryptoCurrencies).length > 0) {\n        cryptoCurrencies.data.forEach((obj) => {\n          // individual currency\n          if (currencyName) {\n            if (obj.id === currencyName) {\n              const sparkLineCurrentValues = obj.sparkline_in_7d.price;\n              setSparkLineData(sparkLineCurrentValues);\n            }\n            // total\n          } else {\n            obj.sparkline_in_7d.price.forEach((price, index) => {\n              sparkLineCurrentValuesTotal[index] +=\n                price * getAmount(user, obj.id);\n            });\n            // not all 7d currency price arrays have the same length --> this results in the last value of the 7d currency total price is too low\n            // to avoid this the last value in array is set to the value before last in the array\n            sparkLineCurrentValuesTotal[\n              sparkLineCurrentValuesTotal.length - 1\n            ] =\n              sparkLineCurrentValuesTotal[\n                sparkLineCurrentValuesTotal.length - 2\n              ];\n            setSparkLineData(sparkLineCurrentValuesTotal);\n          }\n        });\n      }\n    }\n  };\n\n  const getX_axisArray = () => {\n    let Xaxis = [];\n    if (sparkLineData) {\n      Xaxis = new Array(sparkLineData.length).fill(\"\");\n    }\n    return Xaxis;\n  };\n\n  const checkLineColor = () => {\n    if (sparkLineData) {\n      return sparkLineData[sparkLineData.length - 1] - sparkLineData[0] > 0\n        ? \"green\"\n        : \"red\";\n    }\n  };\n\n  return (\n    <div style={{ width: \"10rem\" }}>\n      <SparkLineCharts\n        sparkLineData={sparkLineData}\n        getX_axisArray={getX_axisArray}\n        checkLineColor={checkLineColor}\n      />\n    </div>\n  );\n};\n\nexport default SparkLine;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/charts/SparkLineCharts.js",[],{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","severity":1,"message":"195","line":40,"column":6,"nodeType":"196","endLine":40,"endColumn":37,"suggestions":"197"},{"ruleId":"190","replacedBy":"198"},{"ruleId":"192","replacedBy":"199"},{"ruleId":"194","severity":1,"message":"200","line":45,"column":6,"nodeType":"196","endLine":45,"endColumn":8,"suggestions":"201"},{"ruleId":"202","severity":1,"message":"203","line":85,"column":21,"nodeType":"204","messageId":"205","endLine":85,"endColumn":24},{"ruleId":"194","severity":1,"message":"206","line":137,"column":6,"nodeType":"196","endLine":137,"endColumn":47,"suggestions":"207"},{"ruleId":"194","severity":1,"message":"208","line":14,"column":6,"nodeType":"196","endLine":14,"endColumn":17,"suggestions":"209"},{"ruleId":"190","replacedBy":"210"},{"ruleId":"192","replacedBy":"211"},{"ruleId":"190","replacedBy":"212"},{"ruleId":"192","replacedBy":"213"},{"ruleId":"214","severity":1,"message":"215","line":144,"column":11,"nodeType":"216","endLine":144,"endColumn":28},{"ruleId":"190","replacedBy":"217"},{"ruleId":"192","replacedBy":"218"},{"ruleId":"194","severity":1,"message":"219","line":21,"column":6,"nodeType":"196","endLine":21,"endColumn":8,"suggestions":"220"},{"ruleId":"194","severity":1,"message":"221","line":28,"column":6,"nodeType":"196","endLine":28,"endColumn":25,"suggestions":"222"},{"ruleId":"190","replacedBy":"223"},{"ruleId":"192","replacedBy":"224"},{"ruleId":"225","severity":1,"message":"226","line":10,"column":28,"nodeType":"227","messageId":"228","endLine":10,"endColumn":30},{"ruleId":"194","severity":1,"message":"229","line":13,"column":6,"nodeType":"196","endLine":13,"endColumn":8,"suggestions":"230"},{"ruleId":"190","replacedBy":"231"},{"ruleId":"192","replacedBy":"232"},{"ruleId":"194","severity":1,"message":"233","line":23,"column":6,"nodeType":"196","endLine":23,"endColumn":8,"suggestions":"234"},{"ruleId":"202","severity":1,"message":"235","line":1,"column":17,"nodeType":"204","messageId":"205","endLine":1,"endColumn":25},{"ruleId":"190","replacedBy":"236"},{"ruleId":"192","replacedBy":"237"},{"ruleId":"238","severity":1,"message":"239","line":61,"column":35,"nodeType":"240","messageId":"241","endLine":61,"endColumn":37},{"ruleId":"242","severity":1,"message":"243","line":95,"column":29,"nodeType":"244","messageId":"245","endLine":95,"endColumn":45},{"ruleId":"242","severity":1,"message":"246","line":102,"column":29,"nodeType":"244","messageId":"245","endLine":102,"endColumn":45},{"ruleId":"238","severity":1,"message":"239","line":176,"column":33,"nodeType":"240","messageId":"241","endLine":176,"endColumn":35},{"ruleId":"194","severity":1,"message":"247","line":16,"column":6,"nodeType":"196","endLine":16,"endColumn":12,"suggestions":"248"},{"ruleId":"202","severity":1,"message":"249","line":11,"column":11,"nodeType":"204","messageId":"205","endLine":11,"endColumn":20},{"ruleId":"202","severity":1,"message":"250","line":11,"column":22,"nodeType":"204","messageId":"205","endLine":11,"endColumn":30},{"ruleId":"194","severity":1,"message":"251","line":43,"column":6,"nodeType":"196","endLine":43,"endColumn":55,"suggestions":"252"},{"ruleId":"238","severity":1,"message":"239","line":53,"column":44,"nodeType":"240","messageId":"241","endLine":53,"endColumn":46},{"ruleId":"194","severity":1,"message":"253","line":57,"column":6,"nodeType":"196","endLine":57,"endColumn":25,"suggestions":"254"},{"ruleId":"194","severity":1,"message":"255","line":38,"column":6,"nodeType":"196","endLine":38,"endColumn":8,"suggestions":"256"},{"ruleId":"194","severity":1,"message":"257","line":42,"column":6,"nodeType":"196","endLine":42,"endColumn":15,"suggestions":"258"},{"ruleId":"194","severity":1,"message":"259","line":10,"column":6,"nodeType":"196","endLine":10,"endColumn":24,"suggestions":"260"},"no-native-reassign",["261"],"no-negated-in-lhs",["262"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'prevCurrentValues'. Either include it or remove the dependency array.","ArrayExpression",["263"],["261"],["262"],"React Hook useEffect has missing dependencies: 'fiat' and 'origin'. Either include them or remove the dependency array. If 'setLabelStr' needs the current value of 'fiat', you can also switch to useReducer instead of useState and read 'fiat' in the reducer.",["264"],"no-unused-vars","'key' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'currency' and 'positions'. Either include them or remove the dependency array.",["265"],"React Hook useEffect has missing dependencies: 'get24hMax' and 'get24hMin'. Either include them or remove the dependency array.",["266"],["261"],["262"],["261"],["262"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["261"],["262"],"React Hook useEffect has missing dependencies: 'data.state.currency' and 'data.state.date_of_purchase'. Either include them or remove the dependency array.",["267"],"React Hook useEffect has a missing dependency: 'prevCurrentValueTotal'. Either include it or remove the dependency array.",["268"],["261"],["262"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'data.current_price'. Either include it or remove the dependency array.",["269"],["261"],["262"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["270"],"'Fragment' is defined but never used.",["261"],["262"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-self-assign","'sort[element][1]' is assigned to itself.","MemberExpression","selfAssignment","'sort[element][2]' is assigned to itself.","React Hook useEffect has missing dependencies: 'logedin' and 'upDateMarketChartState'. Either include them or remove the dependency array. If 'upDateMarketChartState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["271"],"'firstname' is assigned a value but never used.","'lastname' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getInitialValuePurchase'. Either include it or remove the dependency array.",["272"],"React Hook useEffect has missing dependencies: 'cryptoCurrencies', 'currencyNamesAndCurrentValues', and 'user'. Either include them or remove the dependency array.",["273"],"React Hook useEffect has a missing dependency: 'loadUserObj'. Either include it or remove the dependency array.",["274"],"React Hook useEffect has a missing dependency: 'updateCryptoCurrenciesState'. Either include it or remove the dependency array.",["275"],"React Hook useEffect has a missing dependency: 'getSparkLineData'. Either include it or remove the dependency array.",["276"],"no-global-assign","no-unsafe-negation",{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},{"desc":"295","fix":"296"},{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},"Update the dependencies array to be: [currencyNamesAndCurrentValues, prevCurrentValues]",{"range":"305","text":"306"},"Update the dependencies array to be: [fiat, origin]",{"range":"307","text":"308"},"Update the dependencies array to be: [nameArray, currentMarketChart, duration, currency, positions]",{"range":"309","text":"310"},"Update the dependencies array to be: [dataArray, get24hMax, get24hMin]",{"range":"311","text":"312"},"Update the dependencies array to be: [data.state.currency, data.state.date_of_purchase]",{"range":"313","text":"314"},"Update the dependencies array to be: [currentValueTotal, prevCurrentValueTotal]",{"range":"315","text":"316"},"Update the dependencies array to be: [data.current_price]",{"range":"317","text":"318"},"Update the dependencies array to be: [user]",{"range":"319","text":"320"},"Update the dependencies array to be: [logedin, upDateMarketChartState, user]",{"range":"321","text":"322"},"Update the dependencies array to be: [user, cryptoCurrencies, logedin, renderOverview, getInitialValuePurchase]",{"range":"323","text":"324"},"Update the dependencies array to be: [cryptoCurrencies, currencyNamesAndCurrentValues, currentValueTotal, user]",{"range":"325","text":"326"},"Update the dependencies array to be: [loadUserObj]",{"range":"327","text":"328"},"Update the dependencies array to be: [logedin, updateCryptoCurrenciesState]",{"range":"329","text":"330"},"Update the dependencies array to be: [cryptoCurrencies, getSparkLineData]",{"range":"331","text":"332"},[1450,1481],"[currencyNamesAndCurrentValues, prevCurrentValues]",[1184,1186],"[fiat, origin]",[4881,4922],"[nameArray, currentMarketChart, duration, currency, positions]",[568,579],"[dataArray, get24hMax, get24hMin]",[590,592],"[data.state.currency, data.state.date_of_purchase]",[938,957],"[currentValueTotal, prevCurrentValueTotal]",[423,425],"[data.current_price]",[785,787],"[user]",[328,334],"[logedin, upDateMarketChartState, user]",[1266,1315],"[user, cryptoCurrencies, logedin, renderOverview, getInitialValuePurchase]",[1719,1738],"[cryptoCurrencies, currencyNamesAndCurrentValues, currentValueTotal, user]",[1317,1319],"[loadUserObj]",[1383,1392],"[logedin, updateCryptoCurrenciesState]",[341,359],"[cryptoCurrencies, getSparkLineData]"]