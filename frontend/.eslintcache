[{"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/index.js":"1","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/currencies.js":"2","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/auth/Login.js":"3","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/layout/Alert.js":"4","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/navbar/Navbar.js":"5","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/user.js":"6","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/portfolio/PositionChartDiagram.js":"7","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/portfolio/CurrencyTotalChartDiagram.js":"8","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/portfolio/TotalChartDiagramm.js":"9","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/App.js":"10","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/positions.js":"11","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/layout/Landing.js":"12","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/portfolio/PositionChart.js":"13","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/portfolio/TotalChart.js":"14","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/navbar/Menu.js":"15","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/portfolio/Overview.js":"16","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/portfolio/Position.js":"17","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/auxiliary/auxiliaryCryptoData.js":"18","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/auth/Register.js":"19","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/portfolio/CurrencyTotalChart.js":"20","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/utils/setAuthToken.js":"21","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/navbar/AccountIcon.js":"22","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/auth.js":"23","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/auxiliary/auxiliaryUserData.js":"24","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/input/AddCrypto.js":"25","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/input/DeductCrypto.js":"26"},{"size":197,"mtime":1609170003662,"results":"27","hashOfConfig":"28"},{"size":4317,"mtime":1609204279811,"results":"29","hashOfConfig":"28"},{"size":1764,"mtime":1609170003658,"results":"30","hashOfConfig":"28"},{"size":304,"mtime":1609170003658,"results":"31","hashOfConfig":"28"},{"size":941,"mtime":1609268083434,"results":"32","hashOfConfig":"28"},{"size":433,"mtime":1609170003658,"results":"33","hashOfConfig":"28"},{"size":1026,"mtime":1609170003662,"results":"34","hashOfConfig":"28"},{"size":1586,"mtime":1609170003658,"results":"35","hashOfConfig":"28"},{"size":4748,"mtime":1609170003662,"results":"36","hashOfConfig":"28"},{"size":5487,"mtime":1609291001926,"results":"37","hashOfConfig":"28"},{"size":305,"mtime":1609170003658,"results":"38","hashOfConfig":"28"},{"size":5309,"mtime":1609259441909,"results":"39","hashOfConfig":"28"},{"size":947,"mtime":1609170003662,"results":"40","hashOfConfig":"28"},{"size":1680,"mtime":1609259458441,"results":"41","hashOfConfig":"28"},{"size":745,"mtime":1609170003658,"results":"42","hashOfConfig":"28"},{"size":4297,"mtime":1609261528413,"results":"43","hashOfConfig":"28"},{"size":3293,"mtime":1609170003658,"results":"44","hashOfConfig":"28"},{"size":5344,"mtime":1609261502197,"results":"45","hashOfConfig":"28"},{"size":2228,"mtime":1609170003658,"results":"46","hashOfConfig":"28"},{"size":1966,"mtime":1609170003658,"results":"47","hashOfConfig":"28"},{"size":453,"mtime":1609170003662,"results":"48","hashOfConfig":"28"},{"size":307,"mtime":1609170003658,"results":"49","hashOfConfig":"28"},{"size":957,"mtime":1609170003658,"results":"50","hashOfConfig":"28"},{"size":641,"mtime":1609170003658,"results":"51","hashOfConfig":"28"},{"size":3205,"mtime":1609270175689,"results":"52","hashOfConfig":"28"},{"size":3311,"mtime":1609290230934,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1m2r51w",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"75"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"72"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"65"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"65"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"65"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"65"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"65"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"65"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"72"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/index.js",[],["123","124"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/currencies.js",[],["125","126"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/auth/Login.js",[],["127","128"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/layout/Alert.js",[],["129","130"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/navbar/Navbar.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/user.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/portfolio/PositionChartDiagram.js",[],["131","132"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/portfolio/CurrencyTotalChartDiagram.js",[],["133","134"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/portfolio/TotalChartDiagramm.js",["135","136"],"import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { cumulativeValueInvestment } from \"../../auxiliary/auxiliaryCryptoData\";\n\nfunction TotalChartDiagramm({\n  positions,\n  currentMarketChart,\n  fiat,\n  originAndCurrency,\n  duration,\n}) {\n  const [nameArray, setNameArray] = useState(\"\");\n\n  const [labelStr, setLabelStr] = useState(\"\");\n\n  const [resultArray, setResultArray] = useState([]);\n\n  const [timeStampArray, setTimeStampArray] = useState([]);\n\n  const [origin, currency] = originAndCurrency;\n\n  useEffect(() => {\n    switch (origin) {\n      case \"initial_value\":\n        setNameArray(\"initialValueArray\");\n        setLabelStr(`Price in ${fiat}`);\n        break;\n      case \"current_value\":\n        setNameArray(\"currentValueArray\");\n        setLabelStr(`Price in ${fiat}`);\n        break;\n      case \"balance\":\n        setNameArray(\"balanceArray\");\n        setLabelStr(`Price in ${fiat}`);\n        break;\n      case \"roi\":\n        setNameArray(\"roiArray\");\n        setLabelStr(`ROI in %`);\n        break;\n      default:\n    }\n  }, []);\n\n  useEffect(() => {\n    const currenciesTotalObjectsArray = [];\n\n    const timeStamps = [];\n\n    let currencyArr = [];\n\n    currency === \"all_currencies\"\n      ? (currencyArr = Object.keys(currentMarketChart))\n      : currencyArr.push(currency);\n\n    // the following 2 functions push object(s) with initialValueArray, currentValueArray, balanceArray, roiArray and timeStampArray for every currency\n    // in currenciesTotalObjectsArray\n    const totalValueInvestment = (obj) => {\n      currenciesTotalObjectsArray.push(obj);\n    };\n\n    currencyArr.forEach((currency) =>\n      totalValueInvestment(\n        cumulativeValueInvestment(\n          positions,\n          currentMarketChart[currency],\n          currency\n        )\n      )\n    );\n\n    // retrieves timeStamps from array of objects with initialValueArray, currentValueArray, balanceArray, roiArray and timeStampArray for every currency\n    // those objects are beeing created in cumulativeValueInvestment() @auxiliaryCryptoData.js\n    // some of these arrays contain empty slots (for details see comments in cumulativeValueInvestment() in @auxiliaryCryptoData.js)\n    // those have to be removed, else the line diagrams display a lot of null values at the beginning\n    // hence filter is employed\n    currenciesTotalObjectsArray.forEach((obj) => {\n      const filtered = obj.timeStampArray.filter((el) => el !== undefined);\n      filtered.forEach((el, index) => (timeStamps[index] = el));\n    });\n\n    // the following code sums up initial_value, current_value, balance of every individual currency so that the totals of these attributes can be displayed in a chart\n    // it also calculates the development of roi over time\n    const resArray = new Array(timeStamps.length).fill(0);\n\n    if (nameArray) {\n      const initValResArray = new Array(timeStamps.length).fill(0);\n      const currValResArray = new Array(timeStamps.length).fill(0);\n\n      currenciesTotalObjectsArray.forEach((obj) => {\n        if (nameArray === \"roiArray\") {\n          obj.initialValueArray.forEach(\n            (el, index) => (initValResArray[index] += el)\n          );\n          obj.currentValueArray.forEach(\n            (el, index) => (currValResArray[index] += el)\n          );\n          obj.roiArray.forEach(\n            (el, index) =>\n              (resArray[index] =\n                (currValResArray[index] * 100) / initValResArray[index] - 100)\n          );\n        } else {\n          if (currency === \"all_currencies\") {\n            obj[nameArray].forEach((el, index) => (resArray[index] += el));\n          } else {\n            // this removes undefined elements from arrays (why are there undefined elements in some arrays? see explanation above for empty slots in timeStampArray)\n            const filtered = obj[nameArray].filter((el) => el !== undefined);\n            filtered.forEach((el, index) => (resArray[index] += el));\n          }\n        }\n      });\n    }\n\n    setResultArray(resArray);\n\n    setTimeStampArray(timeStamps);\n  }, [nameArray, currentMarketChart, duration]);\n\n  return (\n    <div>\n      <Line\n        data={{\n          labels: timeStampArray,\n          datasets: [\n            {\n              label: labelStr,\n              data: resultArray,\n            },\n          ],\n        }}\n        // width={500}\n        height={500}\n        options={{\n          maintainAspectRatio: false,\n          scales: {\n            yAxes: [\n              {\n                scaleLabel: {\n                  display: true,\n                  labelString: labelStr,\n                },\n              },\n            ],\n          },\n        }}\n      />\n    </div>\n  );\n}\n\nexport default TotalChartDiagramm;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/App.js",["137","138"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/positions.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/layout/Landing.js",["139"],"import React, { Fragment, useState } from \"react\";\nimport { getMarketChartsCrypto } from \"../../actions/currencies\";\nimport { getCurrenciesNames } from \"../../auxiliary/auxiliaryCryptoData\";\nimport Overview from \"../portfolio/Overview\";\nimport TotalChart from \"../portfolio/TotalChart\";\n\nfunction Landing({ user, cryptoCurrencies, logedin, triggerAlert }) {\n  const [renderOverview, setRenderOverview] = useState(true);\n  const [renderTotalChart, setRenderTotalChart] = useState(false);\n\n  const toggleView = () => {\n    if (renderOverview) {\n      setRenderOverview(false);\n      setRenderTotalChart(true);\n      return;\n    } else {\n      setRenderOverview(true);\n      setRenderTotalChart(false);\n    }\n  };\n\n  const [originAndCurrency, setOriginAndCurency] = useState([]);\n\n  const updateOriginAndCurrencyState = (origin, currency) =>\n    setOriginAndCurency([origin, currency]);\n\n  const [marketChartTotal, setMarketChartTotal] = useState({});\n  const [marketChartDay, setMarketChartDay] = useState({});\n  const [marketChartWeek, setMarketChartWeek] = useState({});\n  const [marketChartMonth, setMarketChartMonth] = useState({});\n  const [currentMarketChart, setCurrentMarketChart] = useState({});\n\n  const [loaded, setLoaded] = useState(false);\n\n  const isEmpty = (obj) => Object.keys(obj).length === 0;\n\n  const upDateMarketChartState = (duration) => {\n    switch (duration) {\n      case \"all_total\":\n        isEmpty(marketChartTotal)\n          ? loadChartData(duration)\n          : setCurrentMarketChart(marketChartTotal);\n        break;\n      case \"day\":\n        isEmpty(marketChartDay)\n          ? loadChartData(duration)\n          : setCurrentMarketChart(marketChartDay);\n        break;\n      case \"week\":\n        isEmpty(marketChartWeek)\n          ? loadChartData(duration)\n          : setCurrentMarketChart(marketChartWeek);\n        break;\n      case \"month\":\n        isEmpty(marketChartMonth)\n          ? loadChartData(duration)\n          : setCurrentMarketChart(marketChartMonth);\n        break;\n      default:\n    }\n\n    function loadChartData(duration) {\n      setLoaded(false);\n      let currenciesObject = {};\n      const currencyNamesArr = getCurrenciesNames(user);\n\n      // api request is beeing conducted in accordance with the number of currencies\n      // if successful the retured data is beeing stored as arrays in currenciesObject (key = currencyName, value = array)\n      // if the number of attributes matches the number of currencies marketCharts and loaded state are updated\n      // if an error is returned by api the state loaded is set to true (so the empty diagram is beeing displayed) and an error message appears\n      currencyNamesArr.forEach(async (currencyName) => {\n        let currentPrice = 0;\n        cryptoCurrencies.data.forEach((obj) => {\n          if (obj.id === currencyName) currentPrice = obj.current_price;\n        });\n        const res = await getMarketChartsCrypto(\n          user,\n          currencyName,\n          currentPrice,\n          duration\n        );\n\n        if (res instanceof Error) {\n          setLoaded(true);\n          res.response\n            ? triggerAlert(res.response.data)\n            : triggerAlert(\"something went wrong\");\n\n          // this makes sure that currenciesObject only gets attributes if no error occurs so those attributes are proper arrays\n          // otherwhise attributes are non iterable error objects -> a arr.forEach() will throw an exception later in the code and break the app\n          // if api returns errors, currenciesObject remains incomplete and marketCharts state will not be updated\n          // so after the arr.forEach() is done marketCharts state either has valid data or is an empty object (which results in an empty diagram)\n        } else {\n          currenciesObject[currencyName] = res;\n          if (\n            Object.keys(currenciesObject).length === currencyNamesArr.length\n          ) {\n            switch (duration) {\n              case \"all_total\":\n                setMarketChartTotal(currenciesObject);\n                break;\n              case \"day\":\n                setMarketChartDay(currenciesObject);\n                break;\n              case \"week\":\n                setMarketChartWeek(currenciesObject);\n                break;\n              case \"month\":\n                setMarketChartMonth(currenciesObject);\n                break;\n              default:\n            }\n\n            setCurrentMarketChart(currenciesObject);\n\n            setLoaded(true);\n          }\n        }\n      });\n    }\n  };\n\n  return (\n    <Fragment>\n      {renderOverview && (\n        <Overview\n          user={user}\n          cryptoCurrencies={cryptoCurrencies}\n          logedin={logedin}\n          toggleView={toggleView}\n          renderOverview={renderOverview}\n          updateOriginAndCurrencyState={updateOriginAndCurrencyState}\n        />\n      )}\n      {renderTotalChart && (\n        <TotalChart\n          user={user}\n          currentMarketChart={currentMarketChart}\n          logedin={logedin}\n          triggerAlert={triggerAlert}\n          toggleView={toggleView}\n          originAndCurrency={originAndCurrency}\n          loaded={loaded}\n          logedin={logedin}\n          upDateMarketChartState={upDateMarketChartState}\n        />\n      )}\n    </Fragment>\n  );\n}\n\nexport default Landing;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/portfolio/PositionChart.js",["140"],"import React, { Fragment, useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { getMarketCharts } from \"../../actions/currencies\";\nimport PositionChartDiagram from \"./PositionChartDiagram\";\n\nconst PositionChart = () => {\n  let data = useLocation();\n\n  const [marketChart, setMarketChart] = useState({});\n\n  useEffect(() => {\n    const updateStates = async () => {\n      const chartData = await getMarketCharts(\n        data.state.currency,\n        data.state.date_of_purchase\n      );\n      setMarketChart(chartData);\n    };\n\n    updateStates();\n  }, []);\n\n  function isEmpty(obj) {\n    return Object.keys(obj).length === 0;\n  }\n\n  return isEmpty(marketChart) ? (\n    <div>Loading ...</div>\n  ) : (\n    <div>\n      <Fragment>\n        <PositionChartDiagram\n          marketChart={marketChart}\n          amount={data.state.amount}\n        />\n      </Fragment>\n    </div>\n  );\n};\n\nexport default PositionChart;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/portfolio/TotalChart.js",["141"],"import React, { useEffect } from \"react\";\n\nimport TotalChartDiagramm from \"./TotalChartDiagramm\";\n\nfunction TotalChart({\n  user,\n  currentMarketChart,\n  toggleView,\n  originAndCurrency,\n  loaded,\n  duration,\n  upDateMarketChartState,\n  logedin,\n}) {\n  useEffect(() => {\n    if (logedin) upDateMarketChartState(\"all_total\");\n  }, [user]);\n\n  return !loaded ? (\n    <div>Loading ...</div>\n  ) : (\n    <div id=\"total_chart_container\">\n      <div id=\"toggle_view\" onClick={toggleView}>\n        go back\n      </div>\n      <div id=\"durations_container\">\n        <div\n          id={duration === \"day\" && \"duration\"}\n          className=\"durations\"\n          onClick={() => upDateMarketChartState(\"day\")}\n        >\n          day\n        </div>\n        <div\n          id={duration === \"week\" && \"duration\"}\n          className=\"durations\"\n          onClick={() => upDateMarketChartState(\"week\")}\n        >\n          week\n        </div>\n        <div\n          id={duration === \"month\" && \"duration\"}\n          className=\"durations\"\n          onClick={() => upDateMarketChartState(\"month\")}\n        >\n          month\n        </div>\n        <div\n          id={duration === \"all_total\" && \"duration\"}\n          className=\"durations\"\n          onClick={() => upDateMarketChartState(\"all_total\")}\n        >\n          all\n        </div>\n      </div>\n      <div>\n        <TotalChartDiagramm\n          user={user}\n          currentMarketChart={currentMarketChart}\n          positions={user.positions}\n          fiat={user.positions[0].fiat_currency}\n          originAndCurrency={originAndCurrency}\n          duration={duration}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default TotalChart;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/navbar/Menu.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/portfolio/Overview.js",["142","143"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { getNamesAndValues } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getAmount } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getCurrentPrice } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getCurrentValue } from \"../../auxiliary/auxiliaryCryptoData\";\n\nconst Overview = ({\n  user,\n  cryptoCurrencies,\n  logedin,\n  toggleView,\n  renderOverview,\n  updateOriginAndCurrencyState,\n}) => {\n  const [currencyNamesAndValues, setCurrencyNamesAndValues] = useState([]);\n\n  const [currentValueTotal, setCurrentValueTotal] = useState(0);\n\n  const [totalPurchase, setTotalPurchase] = useState(0);\n\n  useEffect(() => {\n    if (logedin) {\n      const namesAndValuesArr = getNamesAndValues(user, cryptoCurrencies);\n\n      setCurrencyNamesAndValues(namesAndValuesArr);\n\n      const totalsArray = namesAndValuesArr.map((el) =>\n        getCurrentValue(user, cryptoCurrencies, el[0])\n      );\n\n      setCurrentValueTotal(totalsArray.reduce((a, b) => a + b, 0));\n\n      setTotalPurchase(getTotalPurchase());\n    }\n  }, [user, cryptoCurrencies, logedin, renderOverview]);\n\n  const getTotal = (currency) => {\n    let sum = 0;\n    user.positions.map((position) => {\n      if (position.crypto_currency === currency) {\n        sum += position.price;\n      }\n    });\n    return sum;\n  };\n\n  const getTotalPurchase = () => {\n    let sum = 0;\n    if (user) user.positions.forEach((position) => (sum += position.price));\n    return sum;\n  };\n\n  const getBalance = (currency) =>\n    getCurrentValue(user, cryptoCurrencies, currency) - getTotal(currency);\n\n  const handleClick = (origin, currency) => {\n    toggleView();\n    updateOriginAndCurrencyState(origin, currency);\n  };\n\n  return (\n    <div>\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Crypto</th>\n            <th scope=\"col\">Amount</th>\n            <th scope=\"col\">Purchased for</th>\n            <th scope=\"col\">Current Value</th>\n            <th scope=\"col\">Balance</th>\n            <th scope=\"col\">ROI</th>\n          </tr>\n        </thead>\n        <tbody>\n          {logedin &&\n            currencyNamesAndValues.map((el) => (\n              <tr>\n                <Link\n                  to={{\n                    pathname: \"/position\",\n                    current_price: getCurrentPrice(cryptoCurrencies, el[0]),\n                    state: {\n                      currency: el[0],\n                      user: user,\n                    },\n                  }}\n                >\n                  <th scope=\"row\">{el[0]}</th>\n                </Link>\n                <td>{getAmount(user, el[0]).toFixed(3)}</td>\n                <td onClick={() => handleClick(\"initial_value\", el[0])}>\n                  {getTotal(el[0]).toFixed(2)}&euro;\n                </td>\n                <td onClick={() => handleClick(\"current_value\", el[0])}>\n                  {getCurrentValue(user, cryptoCurrencies, el[0]).toFixed(2)}\n                  &euro;\n                </td>\n                <td onClick={() => handleClick(\"balance\", el[0])}>\n                  {getBalance(el[0]).toFixed(2)}&euro;\n                </td>\n                <td onClick={() => handleClick(\"roi\", el[0])}>\n                  {(\n                    (getCurrentValue(user, cryptoCurrencies, el[0]) * 100) /\n                      getTotal(el[0]) -\n                    100\n                  ).toFixed(0)}\n                  %\n                </td>\n              </tr>\n            ))}\n        </tbody>\n        <tr>\n          <th scope=\"row\"></th>\n          <td></td>\n          <td onClick={() => handleClick(\"initial_value\", \"all_currencies\")}>\n            {totalPurchase.toFixed(2)}&euro;\n          </td>\n          <td onClick={() => handleClick(\"current_value\", \"all_currencies\")}>\n            {currentValueTotal.toFixed(2)}&euro;\n          </td>\n          <td onClick={() => handleClick(\"balance\", \"all_currencies\")}>\n            {(currentValueTotal - totalPurchase).toFixed(2)}&euro;\n          </td>\n          <td onClick={() => handleClick(\"roi\", \"all_currencies\")}>\n            {((currentValueTotal * 100) / totalPurchase - 100).toFixed(0)}%\n          </td>\n        </tr>\n      </table>\n    </div>\n  );\n};\n\nexport default Overview;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/portfolio/Position.js",["144","145"],"import React, { useEffect, Fragment } from \"react\";\nimport { getCurrencyPositions } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { useLocation } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\n\nfunction Position() {\n  const data = useLocation();\n\n  useEffect(() => {\n    if (data.current_price != undefined) {\n      sessionStorage.setItem(\"crypto_inv_current_price\", data.current_price);\n    }\n  }, []);\n\n  const transformDate = (val) => {\n    const date = new Date(val);\n    const day =\n      date.getDate() < 10 ? \"0\" + date.getDate() : \"\" + date.getDate();\n    const month = date.toLocaleString(\"default\", { month: \"long\" });\n    const year = date.getFullYear();\n    const dateString = `${day}. ${month} ${year}`;\n    return dateString;\n  };\n\n  return (\n    <Fragment>\n      <div>\n        current price per coin:\n        {data.current_price ||\n          sessionStorage.getItem(\"crypto_inv_current_price\")}{\" \"}\n        {data.state.user.positions[0].fiat_currency}\n      </div>\n      <div className=\"row\">\n        {getCurrencyPositions(data.state.user, data.state.currency).map(\n          (position) => {\n            return (\n              <Link\n                id=\"position\"\n                to={{\n                  pathname: \"/position_chart\",\n                  state: {\n                    currency: position.crypto_currency,\n                    date_of_purchase: position.date_of_purchase,\n                    amount: position.amount,\n                  },\n                }}>\n                <div className=\"col\">amount: {position.amount}</div>\n                <div className=\"col\">\n                  price per coin at time of purchase:\n                  {(position.price / position.amount).toFixed(2)}\n                </div>\n                <div className=\"col\">\n                  purchase date:\n                  {/* {position.date_of_purchase.split(\"T\").slice(0, 1).join(\"\")} */}\n                  {transformDate(position.date_of_purchase)}\n                </div>\n                <div className=\"col\">\n                  initial value:\n                  {position.price}\n                  {position.fiat_currency}\n                </div>\n                <div className=\"col\">\n                  current value:\n                  {data.current_price === undefined\n                    ? (\n                        sessionStorage.getItem(\"crypto_inv_current_price\") *\n                        position.amount\n                      ).toFixed(2)\n                    : (data.current_price * position.amount).toFixed(2)}\n                  {position.fiat_currency}\n                </div>\n\n                <div className=\"col\">\n                  balance:\n                  {data.current_price === undefined\n                    ? (\n                        sessionStorage.getItem(\"crypto_inv_current_price\") *\n                          position.amount -\n                        position.price\n                      ).toFixed(2)\n                    : (\n                        data.current_price * position.amount -\n                        position.price\n                      ).toFixed(2)}\n                  {position.fiat_currency}\n                </div>\n              </Link>\n            );\n          }\n        )}\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Position;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/auxiliary/auxiliaryCryptoData.js",["146","147","148"],"export const getCurrenciesNames = (user) => {\n  let currencyArr = [];\n  if (user) {\n    user.positions.map((position) =>\n      currencyArr.push(position.crypto_currency)\n    );\n  }\n\n  // techsith's recommended way to remove duplicates from array (https://www.youtube.com/watch?v=dvPybpgk5Y4)\n\n  return [...new Set(currencyArr)];\n};\n\nexport const getNamesAndValues = (user, cryptoCurrencies) => {\n  let namesAndValuesObj = {};\n\n  getCurrenciesNames(user).forEach((currencyName) => {\n    namesAndValuesObj[currencyName] = getCurrentValue(\n      user,\n      cryptoCurrencies,\n      currencyName\n    );\n  });\n\n  let res = Object.entries(namesAndValuesObj).sort(function (a, b) {\n    return b[1] - a[1];\n  });\n\n  return res;\n};\n\nexport const getCurrentValue = (user, cryptoCurrencies, currencyName) => {\n  const currentPrice = getCurrentPrice(cryptoCurrencies, currencyName);\n  const amount = getAmount(user, currencyName);\n  const getCurrentValue = currentPrice * amount;\n\n  return getCurrentValue;\n};\n\nexport const getCurrentPrice = (cryptoCurrencies, currencyName) => {\n  if (cryptoCurrencies.data && typeof currencyName === \"string\") {\n    const currentPrice = cryptoCurrencies.data.find(\n      (el) => el.id === currencyName\n    );\n\n    console.log(\"currentPrice\");\n    console.log(currentPrice);\n\n    if (currentPrice) return currentPrice.current_price;\n  }\n};\n\nexport const getCurrencyPositions = (user, currencyName) => {\n  if (user.positions) {\n    return user.positions.filter(\n      (position) => position.crypto_currency === currencyName\n    );\n  }\n};\n\nexport const getAmount = (user, currencyName) => {\n  let sum = 0;\n  if (user.positions) {\n    user.positions.map((position) => {\n      if (position.crypto_currency === currencyName) {\n        sum += parseFloat(position.amount);\n      }\n    });\n  }\n\n  return sum;\n};\n\nconst getAmountAndDate = (positions, currencyName) => {\n  // extracts amount of coins, date of purchase and price\n  let AmountAndDateArr = [];\n\n  positions.forEach((el) => {\n    let arrEl = [];\n\n    if (el.crypto_currency === currencyName) {\n      arrEl[0] = Date.parse(el.date_of_purchase);\n      arrEl[1] = parseFloat(el.amount);\n      arrEl[2] = el.price;\n      AmountAndDateArr.push(arrEl);\n    }\n  });\n\n  // sorts AmountAndDateArr by purchase date beginning with the oldest\n  let sort = AmountAndDateArr.sort(function (a, b) {\n    return a[0] - b[0];\n  });\n\n  // adds amount of coins in array so that each amount is the sum of itself + the previous amount\n  for (const element in sort) {\n    element > 0\n      ? (sort[element][1] = sort[element][1] + sort[element - 1][1])\n      : (sort[element][1] = sort[element][1]);\n  }\n\n  // adds price of individual purchases so that each price in array is the sum of itself + the previous amount\n  for (const element in sort) {\n    element > 0\n      ? (sort[element][2] = sort[element][2] + sort[element - 1][2])\n      : (sort[element][2] = sort[element][2]);\n  }\n  return sort;\n};\n\n// returns object (one for each currency) which has various arrays (initialValueArray, currentValueArray etc..)\n// those arrays that are beeing used to display the whole duration from first purchase until present time have all the same length even if a currency had been purchased later\n// if that is the case, an equivalent amount of positions at the beginning of those arrays are undefined\nexport const cumulativeValueInvestment = (positions, marketChart, currency) => {\n  let resultObject = {};\n  let initialValueArr = [];\n  let currentValueArr = [];\n  let balanceArr = [];\n  let roiArr = [];\n  let timeStampArr = [];\n\n  // 1st array: getAmountAndDate() returns array with amount, price and date of purchase for each position of a crypro currency\n  // 2nd array: marketChart is array of objects -> each object has initialValueArray, currentValueArray, balanceArray etc. ..\n  if (marketChart) {\n    getAmountAndDate(positions, currency).forEach((array1) => {\n      marketChart.forEach((array2, index) => {\n        // array1: [date(unix)_of_purchase, amount, initial_value]\n        // array2: [date(unix), price_crypto, timeStamp]\n        if (array1[0] <= array2[0]) {\n          currentValueArr[index] = array2[1] * array1[1];\n          timeStampArr[index] = getTimeStamps(marketChart, index, array2);\n          initialValueArr[index] = array1[2];\n          balanceArr[index] = currentValueArr[index] - initialValueArr[index];\n          roiArr[index] =\n            (currentValueArr[index] * 100) / initialValueArr[index] - 100;\n        }\n      });\n    });\n  }\n\n  resultObject.initialValueArray = initialValueArr;\n  resultObject.currentValueArray = currentValueArr;\n  resultObject.balanceArray = balanceArr;\n  resultObject.roiArray = roiArr;\n  resultObject.timeStampArray = timeStampArr;\n\n  return resultObject;\n};\n\n// returns duration in days -> from date of first purchase currency until now\n// duration is beeing used in conditional to make sure that x-axis doesn't have too many timestamps (granularity of data returned by API)\nconst checkDuration = (marketChart) =>\n  (marketChart[marketChart.length - 1][0] - marketChart[0][0]) /\n  1000 /\n  (24 * 60 * 60);\n\nconst getTimeStamps = (marketChart, index, array2) => {\n  if (\n    index === 0 || checkDuration(marketChart) < 90\n      ? index % 10 === 0\n      : index % 5 === 0\n  ) {\n    return array2[2];\n  } else {\n    return \" \";\n  }\n};\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/auth/Register.js",["149","150"],"import React, { useState } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\n\nconst Register = ({ logedin, signup }) => {\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    password2: \"\",\n  });\n\n  const { firstname, lastname, email, password, password2 } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    signup(email, password, password2);\n  };\n\n  // if some nasty user enters .../login in url --> redirect to landing page\n  // otherwhise the register form could be displayed to a logged in user\n  if (logedin) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <div className=\"form_container\">\n      <h3 className=\"large text-primary\">Sign Up</h3>\n      <p className=\"lead\">\n        <i className=\"fa fa-user auth_fa-user\"></i> Create your account\n      </p>\n      <form className=\"form\" onSubmit={(e) => onSubmit(e)}>\n        <div className=\"form-group\">\n          <input\n            className=\"form-control input_field\"\n            type=\"email\"\n            placeholder=\"Email Address\"\n            name=\"email\"\n            value={email}\n            onChange={(e) => onChange(e)}\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            className=\"form-control input_field\"\n            type=\"password\"\n            placeholder=\"Password\"\n            name=\"password\"\n            value={password}\n            onChange={(e) => onChange(e)}\n            minLength=\"6\"\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            className=\"form-control input_field\"\n            type=\"password\"\n            placeholder=\"Confirm Password\"\n            name=\"password2\"\n            value={password2}\n            onChange={(e) => onChange(e)}\n            minLength=\"6\"\n            required\n          />\n        </div>\n        <input type=\"submit\" className=\"btn btn-primary\" value=\"Register\" />\n      </form>\n      <p className=\"my-1\">\n        Already have an account? <Link to=\"/login\">Sign In</Link>\n      </p>\n    </div>\n  );\n};\n\nexport default Register;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/portfolio/CurrencyTotalChart.js",["151"],"import React, { Fragment, useState, useEffect } from \"react\";\nimport { getMarketChartsCrypto } from \"../../actions/currencies\";\nimport { cumulativeValueInvestment } from \"../../auxiliary/auxiliaryCryptoData\";\nimport CurrencyTotalChartDiagram from \"./CurrencyTotalChartDiagram\";\nimport { useLocation } from \"react-router-dom\";\n\nconst CurrencyTotalChart = ({ user, cryptoCurrencies, logedin }) => {\n  const currency = sessionStorage.getItem(\"crypto_currency\");\n\n  const data = useLocation();\n\n  const [marketChart, setMarketChart] = useState([]);\n\n  const [currencyTotal, setCurrencyTotal] = useState({});\n\n  useEffect(() => {\n    const updateState = async () => {\n      if (logedin && cryptoCurrencies.data) {\n        // getCryptoCurrentDataObj() retrieves currency object from props.cryptoCurrencies\n        // the price attribute in this object is passed as parameter to getMarketChartsCrypto()\n        const getCryptoCurrentDataObj = (currency) => {\n          let currencyObj = {};\n          cryptoCurrencies.data.forEach((obj) => {\n            if (obj.id === currency) currencyObj = obj;\n          });\n          return currencyObj;\n        };\n\n        const fromdate = \"all_currency\";\n\n        const chartData = await getMarketChartsCrypto(\n          user,\n          currency,\n          getCryptoCurrentDataObj(currency).current_price,\n          fromdate\n        );\n        setMarketChart(chartData);\n\n        setCurrencyTotal(\n          cumulativeValueInvestment(user.positions, chartData, currency)\n        );\n      }\n    };\n\n    updateState();\n  }, [user, cryptoCurrencies, logedin]);\n\n  return marketChart.length === 0 ? (\n    <div>Loading ...</div>\n  ) : (\n    <div>\n      <Fragment>\n        <CurrencyTotalChartDiagram\n          currencyTotal={currencyTotal}\n          currency={currency}\n          fiat={user.positions[0].fiat_currency}\n          origin={data.state.origin}\n        />\n      </Fragment>\n    </div>\n  );\n};\nexport default CurrencyTotalChart;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/utils/setAuthToken.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/navbar/AccountIcon.js",["152"],"import React, { Fragment } from \"react\";\nimport Menu from \"./Menu\";\n\nconst AccountIcon = ({ logout, logedin }) => {\n  return (\n    <div id=\"account_nav_item\">\n      account\n      <div id=\"menu\">\n        <Menu logout={logout} logedin={logedin} />\n      </div>\n    </div>\n  );\n};\n\nexport default AccountIcon;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/auth.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/auxiliary/auxiliaryUserData.js",[],["153","154"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/input/AddCrypto.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/input/DeductCrypto.js",["155"],{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"156","replacedBy":"160"},{"ruleId":"158","replacedBy":"161"},{"ruleId":"156","replacedBy":"162"},{"ruleId":"158","replacedBy":"163"},{"ruleId":"156","replacedBy":"164"},{"ruleId":"158","replacedBy":"165"},{"ruleId":"156","replacedBy":"166"},{"ruleId":"158","replacedBy":"167"},{"ruleId":"156","replacedBy":"168"},{"ruleId":"158","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":42,"column":6,"nodeType":"172","endLine":42,"endColumn":8,"suggestions":"173"},{"ruleId":"170","severity":1,"message":"174","line":117,"column":6,"nodeType":"172","endLine":117,"endColumn":47,"suggestions":"175"},{"ruleId":"170","severity":1,"message":"176","line":40,"column":6,"nodeType":"172","endLine":40,"endColumn":8,"suggestions":"177"},{"ruleId":"170","severity":1,"message":"178","line":44,"column":6,"nodeType":"172","endLine":44,"endColumn":15,"suggestions":"179"},{"ruleId":"180","severity":1,"message":"181","line":144,"column":11,"nodeType":"182","endLine":144,"endColumn":28},{"ruleId":"170","severity":1,"message":"183","line":21,"column":6,"nodeType":"172","endLine":21,"endColumn":8,"suggestions":"184"},{"ruleId":"170","severity":1,"message":"185","line":17,"column":6,"nodeType":"172","endLine":17,"endColumn":12,"suggestions":"186"},{"ruleId":"170","severity":1,"message":"187","line":36,"column":6,"nodeType":"172","endLine":36,"endColumn":55,"suggestions":"188"},{"ruleId":"189","severity":1,"message":"190","line":40,"column":35,"nodeType":"191","messageId":"192","endLine":40,"endColumn":37},{"ruleId":"193","severity":1,"message":"194","line":10,"column":28,"nodeType":"195","messageId":"196","endLine":10,"endColumn":30},{"ruleId":"170","severity":1,"message":"197","line":13,"column":6,"nodeType":"172","endLine":13,"endColumn":8,"suggestions":"198"},{"ruleId":"189","severity":1,"message":"190","line":64,"column":35,"nodeType":"191","messageId":"192","endLine":64,"endColumn":37},{"ruleId":"199","severity":1,"message":"200","line":98,"column":29,"nodeType":"201","messageId":"202","endLine":98,"endColumn":45},{"ruleId":"199","severity":1,"message":"203","line":105,"column":29,"nodeType":"201","messageId":"202","endLine":105,"endColumn":45},{"ruleId":"204","severity":1,"message":"205","line":11,"column":11,"nodeType":"206","messageId":"207","endLine":11,"endColumn":20},{"ruleId":"204","severity":1,"message":"208","line":11,"column":22,"nodeType":"206","messageId":"207","endLine":11,"endColumn":30},{"ruleId":"170","severity":1,"message":"209","line":46,"column":6,"nodeType":"172","endLine":46,"endColumn":39,"suggestions":"210"},{"ruleId":"204","severity":1,"message":"211","line":1,"column":17,"nodeType":"206","messageId":"207","endLine":1,"endColumn":25},{"ruleId":"156","replacedBy":"212"},{"ruleId":"158","replacedBy":"213"},{"ruleId":"170","severity":1,"message":"214","line":22,"column":6,"nodeType":"172","endLine":22,"endColumn":8,"suggestions":"215"},"no-native-reassign",["216"],"no-negated-in-lhs",["217"],["216"],["217"],["216"],["217"],["216"],["217"],["216"],["217"],["216"],["217"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fiat' and 'origin'. Either include them or remove the dependency array. If 'setLabelStr' needs the current value of 'fiat', you can also switch to useReducer instead of useState and read 'fiat' in the reducer.","ArrayExpression",["218"],"React Hook useEffect has missing dependencies: 'currency' and 'positions'. Either include them or remove the dependency array.",["219"],"React Hook useEffect has a missing dependency: 'loadUserObj'. Either include it or remove the dependency array.",["220"],"React Hook useEffect has a missing dependency: 'updateCryptoCurrenciesState'. Either include it or remove the dependency array.",["221"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has missing dependencies: 'data.state.currency' and 'data.state.date_of_purchase'. Either include them or remove the dependency array.",["222"],"React Hook useEffect has missing dependencies: 'logedin' and 'upDateMarketChartState'. Either include them or remove the dependency array. If 'upDateMarketChartState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["223"],"React Hook useEffect has a missing dependency: 'getTotalPurchase'. Either include it or remove the dependency array.",["224"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'data.current_price'. Either include it or remove the dependency array.",["225"],"no-self-assign","'sort[element][1]' is assigned to itself.","MemberExpression","selfAssignment","'sort[element][2]' is assigned to itself.","no-unused-vars","'firstname' is assigned a value but never used.","Identifier","unusedVar","'lastname' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currency'. Either include it or remove the dependency array.",["226"],"'Fragment' is defined but never used.",["216"],["217"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["227"],"no-global-assign","no-unsafe-negation",{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},"Update the dependencies array to be: [fiat, origin]",{"range":"248","text":"249"},"Update the dependencies array to be: [nameArray, currentMarketChart, duration, currency, positions]",{"range":"250","text":"251"},"Update the dependencies array to be: [loadUserObj]",{"range":"252","text":"253"},"Update the dependencies array to be: [logedin, updateCryptoCurrenciesState]",{"range":"254","text":"255"},"Update the dependencies array to be: [data.state.currency, data.state.date_of_purchase]",{"range":"256","text":"257"},"Update the dependencies array to be: [logedin, upDateMarketChartState, user]",{"range":"258","text":"259"},"Update the dependencies array to be: [user, cryptoCurrencies, logedin, renderOverview, getTotalPurchase]",{"range":"260","text":"261"},"Update the dependencies array to be: [data.current_price]",{"range":"262","text":"263"},"Update the dependencies array to be: [user, cryptoCurrencies, logedin, currency]",{"range":"264","text":"265"},"Update the dependencies array to be: [user]",{"range":"266","text":"267"},[1088,1090],"[fiat, origin]",[4081,4122],"[nameArray, currentMarketChart, duration, currency, positions]",[1395,1397],"[loadUserObj]",[1461,1470],"[logedin, updateCryptoCurrenciesState]",[590,592],"[data.state.currency, data.state.date_of_purchase]",[329,335],"[logedin, upDateMarketChartState, user]",[1119,1168],"[user, cryptoCurrencies, logedin, renderOverview, getTotalPurchase]",[423,425],"[data.current_price]",[1555,1588],"[user, cryptoCurrencies, logedin, currency]",[714,716],"[user]"]