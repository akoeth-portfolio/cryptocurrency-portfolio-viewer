[{"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/Twenty4hChangeInvestmentTotal.js":"1","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/OverviewCurrencies.js":"2","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/Twenty4hChangeByCurrency.js":"3","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/charts/TotalChartDiagramm.js":"4","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/charts/Twenty4hChange.js":"5","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/index.js":"6","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/auxiliary/auxiliaryUserData.js":"7","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/layout/Landing.js":"8","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/layout/Alert.js":"9","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/auth/Login.js":"10","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/input/AddCrypto.js":"11","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/positions/PositionChart.js":"12","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/positions/PositionChartDiagram.js":"13","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/utils/setAuthToken.js":"14","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/navbar/Menu.js":"15","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/OverviewTotal.js":"16","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/Twenty4hChangeInvestmentByCurrencies.js":"17","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/currencies.js":"18","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/positions/Position.js":"19","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/positions.js":"20","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/input/DeductCrypto.js":"21","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/navbar/AccountIcon.js":"22","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/auxiliary/auxiliaryCryptoData.js":"23","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/user.js":"24","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/charts/TotalChart.js":"25","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/auth/Register.js":"26","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/Overview.js":"27","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/navbar/Navbar.js":"28","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/App.js":"29","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/auth.js":"30","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/charts/SparkLine.js":"31","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/charts/SparkLineCharts.js":"32","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/navbar/Fiat.js":"33","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/auxiliary/auxiliaryDateData.js":"34","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/auxiliary/auxiliaryFiatData.js":"35"},{"size":508,"mtime":1610834986464,"results":"36","hashOfConfig":"37"},{"size":7338,"mtime":1611071462342,"results":"38","hashOfConfig":"37"},{"size":1527,"mtime":1610840353701,"results":"39","hashOfConfig":"37"},{"size":7266,"mtime":1611106201352,"results":"40","hashOfConfig":"37"},{"size":1301,"mtime":1610327550686,"results":"41","hashOfConfig":"37"},{"size":197,"mtime":1609170003662,"results":"42","hashOfConfig":"37"},{"size":641,"mtime":1609170003658,"results":"43","hashOfConfig":"37"},{"size":7559,"mtime":1611099597545,"results":"44","hashOfConfig":"37"},{"size":304,"mtime":1609170003658,"results":"45","hashOfConfig":"37"},{"size":1764,"mtime":1609170003658,"results":"46","hashOfConfig":"37"},{"size":4177,"mtime":1610841013877,"results":"47","hashOfConfig":"37"},{"size":947,"mtime":1609170003662,"results":"48","hashOfConfig":"37"},{"size":1026,"mtime":1609170003662,"results":"49","hashOfConfig":"37"},{"size":453,"mtime":1609170003662,"results":"50","hashOfConfig":"37"},{"size":745,"mtime":1609170003658,"results":"51","hashOfConfig":"37"},{"size":3655,"mtime":1610834961240,"results":"52","hashOfConfig":"37"},{"size":1785,"mtime":1610834901540,"results":"53","hashOfConfig":"37"},{"size":4866,"mtime":1611100607046,"results":"54","hashOfConfig":"37"},{"size":3446,"mtime":1609624366781,"results":"55","hashOfConfig":"37"},{"size":357,"mtime":1610555880309,"results":"56","hashOfConfig":"37"},{"size":5330,"mtime":1610834854959,"results":"57","hashOfConfig":"37"},{"size":307,"mtime":1609170003658,"results":"58","hashOfConfig":"37"},{"size":5914,"mtime":1611100524202,"results":"59","hashOfConfig":"37"},{"size":433,"mtime":1609170003658,"results":"60","hashOfConfig":"37"},{"size":1916,"mtime":1611104985588,"results":"61","hashOfConfig":"37"},{"size":2232,"mtime":1610814403131,"results":"62","hashOfConfig":"37"},{"size":4727,"mtime":1611077863943,"results":"63","hashOfConfig":"37"},{"size":1068,"mtime":1610403873911,"results":"64","hashOfConfig":"37"},{"size":6395,"mtime":1610760399634,"results":"65","hashOfConfig":"37"},{"size":957,"mtime":1609170003658,"results":"66","hashOfConfig":"37"},{"size":2953,"mtime":1610555375921,"results":"67","hashOfConfig":"37"},{"size":1070,"mtime":1610396805951,"results":"68","hashOfConfig":"37"},{"size":349,"mtime":1610403881087,"results":"69","hashOfConfig":"37"},{"size":288,"mtime":1610667840005,"results":"70","hashOfConfig":"37"},{"size":1319,"mtime":1610827508225,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1m2r51w",{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"87"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"97"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"97"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"97"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"78"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"87"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"87"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"87"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/Twenty4hChangeInvestmentTotal.js",[],["161","162"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/OverviewCurrencies.js",["163","164"],"import React, { useState, useEffect } from \"react\";\nimport Twenty4hChangeInvestmentByCurrencies from \"./Twenty4hChangeInvestmentByCurrencies\";\nimport Twenty4hChangeByCurrency from \"./Twenty4hChangeByCurrency\";\nimport SparkLine from \"../charts/SparkLine\";\nimport { Link } from \"react-router-dom\";\nimport { getAmount } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getCurrentPrice } from \"../../auxiliary/auxiliaryCryptoData\";\n\nconst OverviewCurrencies = ({\n  user,\n  cryptoCurrencies,\n  exchangeRates,\n  currencyNamesAndCurrentValues,\n  prevCurrentValues,\n  logedin,\n  fiat,\n  prevFiat,\n  fiatSymbol,\n  getInitialValue,\n  get24hourChangeByCurrency,\n  getCurrentValue,\n  handleClick,\n}) => {\n  // both hooks are neccessary to persist change currentValues so they survive re mounting of this component\n  const [currentValuesChange, setCurrentValuesChange] = useState(\n    sessionStorage.getItem(\"changeObj\")\n  );\n\n  useEffect(() => {\n    if (fiat.current === prevFiat.current) {\n      const changeObj = {};\n      currencyNamesAndCurrentValues.forEach(([currencyName, currentValue]) => {\n        const change = currentValue - prevCurrentValues.current[currencyName];\n\n        if (change !== 0) changeObj[currencyName] = change;\n      });\n\n      // makes sure that session storage and state are only updated if it is not a re mount\n      if (\n        !sessionStorage.getItem(\"changeObj\") ||\n        !isNaN(Object.values(changeObj)[0])\n      ) {\n        sessionStorage.setItem(\"changeObj\", JSON.stringify(changeObj));\n        setCurrentValuesChange(JSON.stringify(changeObj));\n      }\n    }\n  }, [currencyNamesAndCurrentValues]);\n\n  useEffect(() => {\n    calcChange();\n  }, [fiat.current]);\n\n  // converts change current total into the selected fiat\n  const calcChange = async () => {\n    // switch from EUR to USD\n    if (fiat.current === \"USD\" && prevFiat.current === \"EUR\") {\n      if (exchangeRates.data) {\n        // console.log(\"EUR to USD\");\n        const changeObj = {};\n        currencyNamesAndCurrentValues.forEach(\n          ([currencyName, currentValue]) => {\n            if (currentValuesChange) {\n              changeObj[currencyName] =\n                JSON.parse(currentValuesChange)[currencyName] *\n                exchangeRates.data.rates.USD;\n            }\n          }\n        );\n\n        setCurrentValuesChange(JSON.stringify(changeObj));\n      }\n    }\n\n    // switch from USD to EUR\n    if (fiat.current === \"EUR\" && prevFiat.current === \"USD\") {\n      if (exchangeRates.data) {\n        // console.log(\"USD to EUR\");\n        const changeObj = {};\n        currencyNamesAndCurrentValues.forEach(\n          ([currencyName, currentValue]) => {\n            changeObj[currencyName] =\n              JSON.parse(currentValuesChange)[currencyName] *\n              (1 / exchangeRates.data.rates.USD);\n          }\n        );\n\n        setCurrentValuesChange(JSON.stringify(changeObj));\n      }\n    }\n  };\n\n  const getBalance = (currency) =>\n    getCurrentValue(user, cryptoCurrencies, currency) -\n    getInitialValue(user, currency, fiat);\n\n  return (\n    <tbody>\n      {logedin &&\n        currencyNamesAndCurrentValues.map(([currencyName, currentValue]) => {\n          return (\n            <tr>\n              {/* crypto */}\n              <Link\n                to={{\n                  pathname: \"/position\",\n                  current_price: getCurrentPrice(\n                    cryptoCurrencies,\n                    currencyName\n                  ),\n                  state: {\n                    currency: currencyName,\n                    user: user,\n                  },\n                }}\n              >\n                <th scope=\"row\">\n                  {currencyName}{\" \"}\n                  <Twenty4hChangeByCurrency\n                    cryptoCurrencies={cryptoCurrencies}\n                    currencyName={currencyName}\n                    fiatSymbol={fiatSymbol}\n                  />\n                </th>\n              </Link>\n\n              {/* amount */}\n              <td>{getAmount(user, currencyName).toFixed(3)}</td>\n\n              {/* initial value */}\n              <td onClick={() => handleClick(\"initial_value\", currencyName)}>\n                {getInitialValue(user, currencyName, fiat).toFixed(2)}{\" \"}\n                {fiatSymbol.current}\n              </td>\n\n              {/* current value */}\n              <td onClick={() => handleClick(\"current_value\", currencyName)}>\n                <div className=\"change_container\">\n                  {currentValue.toFixed(2)} {fiatSymbol.current}\n                  {currentValuesChange && (\n                    <div\n                      className=\"change_value\"\n                      style={{\n                        color:\n                          currentValuesChange !== undefined &&\n                          JSON.parse(currentValuesChange)[currencyName] >= 0\n                            ? \"green\"\n                            : \"red\",\n                      }}\n                    >\n                      {Object.keys(JSON.parse(currentValuesChange)).length >\n                        0 &&\n                      JSON.parse(currentValuesChange)[currencyName] &&\n                      JSON.parse(currentValuesChange)[currencyName] !== null &&\n                      JSON.parse(currentValuesChange)[currencyName] !== 0\n                        ? JSON.parse(currentValuesChange)[currencyName].toFixed(\n                            2\n                          )\n                        : Number(0).toFixed(2)}{\" \"}\n                      {fiatSymbol.current}\n                    </div>\n                  )}\n                </div>\n\n                <Twenty4hChangeInvestmentByCurrencies\n                  user={user}\n                  cryptoCurrencies={cryptoCurrencies}\n                  getAmount={getAmount}\n                  get24hourChangeByCurrency={get24hourChangeByCurrency}\n                  getCurrentValue={getCurrentValue}\n                  currencyName={currencyName}\n                  fiatSymbol={fiatSymbol}\n                />\n              </td>\n\n              {/* profit */}\n              <td onClick={() => handleClick(\"balance\", currencyName)}>\n                {getBalance(currencyName).toFixed(2)} {fiatSymbol.current}\n              </td>\n\n              {/* roi */}\n              <td onClick={() => handleClick(\"roi\", currencyName)}>\n                <div className=\"x_container\">\n                  <div>\n                    {(\n                      (getCurrentValue(user, cryptoCurrencies, currencyName) *\n                        100) /\n                        getInitialValue(user, currencyName, fiat) -\n                      100\n                    ).toFixed(0)}\n                    %\n                  </div>\n                  <div className=\"x_value\">\n                    (\n                    {(\n                      currentValue / getInitialValue(user, currencyName, fiat)\n                    ).toFixed(1)}\n                    x)\n                  </div>\n                </div>\n              </td>\n\n              {/* sparkline */}\n              <td>\n                <SparkLine\n                  user={user}\n                  cryptoCurrencies={cryptoCurrencies}\n                  currencyName={currencyName}\n                />\n              </td>\n            </tr>\n          );\n        })}\n    </tbody>\n  );\n};\n\nexport default OverviewCurrencies;\n",["165","166"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/Twenty4hChangeByCurrency.js",[],["167","168"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/charts/TotalChartDiagramm.js",["169","170","171","172","173","174"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/charts/Twenty4hChange.js",["175"],"import React, { useState, useEffect } from \"react\";\n\nconst Twenty4hChange = ({ dataArray }) => {\n  const [change, setChange] = useState(0);\n  const [twentyFourHoursMax, setTwentyFourHoursMax] = useState(0);\n  const [twentyFourHoursMin, setTwentyFourHoursMin] = useState(0);\n\n  useEffect(() => {\n    // array has NaN in the end which have to be removed because else change = NaN\n    const arr = dataArray.filter((el) => !isNaN(el));\n    setChange(dataArray[arr.length - 1] - arr[0]);\n    setTwentyFourHoursMax(get24hMax());\n    setTwentyFourHoursMin(get24hMin());\n  }, [dataArray]);\n\n  const get24hMax = () => {\n    const arraySorted = dataArray.sort(function (a, b) {\n      return b - a;\n    });\n\n    return arraySorted[0];\n  };\n\n  const get24hMin = () => {\n    const arrSorted = dataArray.sort(function (a, b) {\n      return a - b;\n    });\n\n    return arrSorted[0];\n  };\n\n  return (\n    <div className=\"twenty_four_hour_charts_container\">\n      <div\n        style={{\n          color: change > 0 ? \"green\" : \"red\",\n        }}\n      >\n        change: {change.toFixed(2)} &euro;\n      </div>\n      <div className=\"crypto_24h_change\">max: {twentyFourHoursMax} &euro;</div>\n      <div className=\"crypto_24h_change\">min: {twentyFourHoursMin} &euro;</div>\n    </div>\n  );\n};\n\nexport default Twenty4hChange;\n",["176","177"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/index.js",[],["178","179"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/auxiliary/auxiliaryUserData.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/layout/Landing.js",["180","181"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/layout/Alert.js",[],["182","183"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/auth/Login.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/input/AddCrypto.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/positions/PositionChart.js",["184"],"import React, { Fragment, useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { getMarketCharts } from \"../../actions/currencies\";\nimport PositionChartDiagram from \"./PositionChartDiagram\";\n\nconst PositionChart = () => {\n  let data = useLocation();\n\n  const [marketChart, setMarketChart] = useState({});\n\n  useEffect(() => {\n    const updateStates = async () => {\n      const chartData = await getMarketCharts(\n        data.state.currency,\n        data.state.date_of_purchase\n      );\n      setMarketChart(chartData);\n    };\n\n    updateStates();\n  }, []);\n\n  function isEmpty(obj) {\n    return Object.keys(obj).length === 0;\n  }\n\n  return isEmpty(marketChart) ? (\n    <div>Loading ...</div>\n  ) : (\n    <div>\n      <Fragment>\n        <PositionChartDiagram\n          marketChart={marketChart}\n          amount={data.state.amount}\n        />\n      </Fragment>\n    </div>\n  );\n};\n\nexport default PositionChart;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/positions/PositionChartDiagram.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/utils/setAuthToken.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/navbar/Menu.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/OverviewTotal.js",["185","186"],"import React, { useState, useEffect } from \"react\";\nimport SparkLine from \"../charts/SparkLine\";\nimport Twenty4hChangeInvestmentTotal from \"./Twenty4hChangeInvestmentTotal\";\n\nconst OverviewTotal = ({\n  user,\n  cryptoCurrencies,\n  exchangeRates,\n  totalPurchase,\n  currentValueTotal,\n  prevCurrentValueTotal,\n  fiat,\n  prevFiat,\n  fiatSymbol,\n  get24hourChangeTotal,\n  handleClick,\n}) => {\n  // both hooks are neccessary to persist change currentValueTotal so it survives re mounting of this component\n  const [currentValueTotalChange, setCurrentValueTotalChange] = useState(\n    sessionStorage.getItem(\"change\")\n  );\n\n  useEffect(() => {\n    // makes sure that change current total is not re - calculated when user switches fiat\n    if (fiat.current === prevFiat.current) {\n      const change = (\n        currentValueTotal - prevCurrentValueTotal.current\n      ).toFixed(2);\n      // makes sure that session storage and state are only updated if it is not a re mount\n      if (!isNaN(change) && prevCurrentValueTotal.current !== 0) {\n        sessionStorage.setItem(\"change\", change);\n        setCurrentValueTotalChange(change);\n      }\n    }\n  }, [currentValueTotal]);\n\n  useEffect(() => {\n    calcChange();\n  }, [fiat.current]);\n\n  // converts change current total into the selected fiat\n  const calcChange = async () => {\n    // switch from EUR to USD\n    if (fiat.current === \"USD\" && prevFiat.current === \"EUR\") {\n      if (exchangeRates.data) {\n        setCurrentValueTotalChange(\n          (currentValueTotalChange * exchangeRates.data.rates.USD).toFixed(2)\n        );\n      }\n    }\n\n    // switch from USD to EUR\n    if (fiat.current === \"EUR\" && prevFiat.current === \"USD\") {\n      if (exchangeRates.data) {\n        setCurrentValueTotalChange(\n          (\n            currentValueTotalChange *\n            (1 / exchangeRates.data.rates.USD)\n          ).toFixed(2)\n        );\n      }\n    }\n  };\n\n  return (\n    <tr id=\"overview_total\">\n      <th scope=\"row\"></th>\n\n      <td></td>\n\n      {/* initial value */}\n      <td onClick={() => handleClick(\"initial_value\", \"all_currencies\")}>\n        {totalPurchase.toFixed(2)} {fiatSymbol.current}\n      </td>\n\n      {/* current value */}\n      <td onClick={() => handleClick(\"current_value\", \"all_currencies\")}>\n        <div className=\"change_container\">\n          <div>\n            {currentValueTotal.toFixed(2)} {fiatSymbol.current}\n          </div>\n          <div\n            className=\"change_value\"\n            style={{\n              color: currentValueTotalChange >= 0 ? \"green\" : \"red\",\n            }}\n          >\n            {currentValueTotalChange && currentValueTotalChange !== 0\n              ? currentValueTotalChange\n              : 0}{\" \"}\n            {fiatSymbol.current}\n          </div>\n        </div>\n\n        <Twenty4hChangeInvestmentTotal\n          get24hourChangeTotal={get24hourChangeTotal}\n          fiatSymbol={fiatSymbol}\n        />\n      </td>\n\n      {/* profit */}\n      <td onClick={() => handleClick(\"balance\", \"all_currencies\")}>\n        {(currentValueTotal - totalPurchase).toFixed(2)} {fiatSymbol.current}\n      </td>\n\n      {/* roi */}\n      <td onClick={() => handleClick(\"roi\", \"all_currencies\")}>\n        <div className=\"x_container\">\n          <div>\n            {((currentValueTotal * 100) / totalPurchase - 100).toFixed(0)}%\n          </div>\n          <div className=\"x_value\">\n            ({(currentValueTotal / totalPurchase).toFixed(1)}\n            x)\n          </div>\n        </div>\n      </td>\n\n      {/* sparkline */}\n      <td>\n        <SparkLine user={user} cryptoCurrencies={cryptoCurrencies} />\n      </td>\n    </tr>\n  );\n};\n\nexport default OverviewTotal;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/Twenty4hChangeInvestmentByCurrencies.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/currencies.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/positions/Position.js",["187","188"],"import React, { Fragment, useEffect } from \"react\";\nimport { getCurrencyPositions } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { useLocation } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\n\nfunction Position() {\n  const data = useLocation();\n\n  useEffect(() => {\n    if (data.current_price != undefined) {\n      sessionStorage.setItem(\"crypto_inv_current_price\", data.current_price);\n    }\n  }, []);\n\n  const transformDate = (val) => {\n    const date = new Date(val);\n    const day =\n      date.getDate() < 10 ? \"0\" + date.getDate() : \"\" + date.getDate();\n    const month = date.toLocaleString(\"default\", { month: \"long\" });\n    const year = date.getFullYear();\n    const dateString = `${day}. ${month} ${year}`;\n    return dateString;\n  };\n\n  const getSortedPositions = () => {\n    const positionsArray = getCurrencyPositions(\n      data.state.user,\n      data.state.currency\n    );\n    const sortedArray = positionsArray.sort(\n      (a, b) => Date.parse(b.date_of_purchase) - Date.parse(a.date_of_purchase)\n    );\n    return sortedArray;\n  };\n\n  return (\n    <Fragment>\n      <div>\n        current price per coin:\n        {data.current_price ||\n          sessionStorage.getItem(\"crypto_inv_current_price\")}{\" \"}\n        {data.state.user.positions[0].fiat_currency}\n      </div>\n      <div className=\"row\">\n        {getSortedPositions().map((position) => {\n          return (\n            <Link\n              id=\"position\"\n              to={{\n                pathname: \"/position_chart\",\n                state: {\n                  currency: position.crypto_currency,\n                  date_of_purchase: position.date_of_purchase,\n                  amount: position.amount,\n                },\n              }}\n            >\n              <div className=\"col\">amount: {position.amount}</div>\n              <div className=\"col\">\n                price per coin at time of purchase:\n                {(position.price / position.amount).toFixed(2)}\n              </div>\n              <div className=\"col\">\n                purchase date:\n                {/* {position.date_of_purchase.split(\"T\").slice(0, 1).join(\"\")} */}\n                {transformDate(position.date_of_purchase)}\n              </div>\n              <div className=\"col\">\n                initial value:\n                {position.price}\n                {position.fiat_currency}\n              </div>\n              <div className=\"col\">\n                current value:\n                {data.current_price === undefined\n                  ? (\n                      sessionStorage.getItem(\"crypto_inv_current_price\") *\n                      position.amount\n                    ).toFixed(2)\n                  : (data.current_price * position.amount).toFixed(2)}\n                {position.fiat_currency}\n              </div>\n\n              <div className=\"col\">\n                balance:\n                {data.current_price === undefined\n                  ? (\n                      sessionStorage.getItem(\"crypto_inv_current_price\") *\n                        position.amount -\n                      position.price\n                    ).toFixed(2)\n                  : (\n                      data.current_price * position.amount -\n                      position.price\n                    ).toFixed(2)}\n                {position.fiat_currency}\n              </div>\n            </Link>\n          );\n        })}\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Position;\n",["189","190"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/positions.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/input/DeductCrypto.js",["191"],"import React, { useState, useEffect } from \"react\";\nimport { getAmount } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getCurrenciesNames } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getInitialValue } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { convertFiat } from \"../../auxiliary/auxiliaryFiatData\";\n\n// import { getLatestCryptoPrice } from \"../../actions/currencies\";\n\nconst DeductCrypto = ({ user, makePosition, loadUserObj, triggerAlert }) => {\n  let [formData, setFormData] = useState({\n    crypto_currency: \"\",\n    amount: \"\",\n    date_of_purchase: \"\",\n  });\n\n  const { crypto_currency, amount, date_of_purchase } = formData;\n\n  const [currencyNames, setCurrencyNames] = useState([]);\n\n  useEffect(() => {\n    const namesArr = getCurrenciesNames(user);\n    namesArr.unshift(\"\");\n    setCurrencyNames(namesArr);\n  }, []);\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n\n    // user input validation\n    if (!crypto_currency) {\n      triggerAlert(\"Please select a cryptocurrency\", \"danger\");\n      return;\n    }\n\n    const currentAmount = getAmount(user, crypto_currency);\n\n    if (amount > currentAmount) {\n      triggerAlert(\n        `You have only ${currentAmount} unit(s) of this currency`,\n        \"danger\"\n      );\n      return;\n    }\n\n    // value of the amount (in fiat) to be deducted from the amount of a crypto currency in the portfolio is calculated based on the median value\n    // of all positions of this currency\n    const median_price_currency_positions =\n      getInitialValue(user, crypto_currency, { current: \"EUR\" }) /\n      getAmount(user, crypto_currency);\n\n    // calculates the actual value of the deductable amount\n    const deductable_value = median_price_currency_positions * amount;\n\n    // returns an object which has actual value of deductable amount in EUR, USD and GBP\n    const convertObject = await convertFiat(\n      deductable_value,\n      \"EUR\",\n      date_of_purchase,\n      triggerAlert\n    );\n\n    // actual value of deductable amount is turned into negative\n    for (let [key, value] of Object.entries(convertObject)) {\n      convertObject[key] = value * -1;\n    }\n    // sets content of convertObject which is the negtive value of deductable amount for attributes EUR, USD and GBP to the formData Object\n    formData = Object.assign(formData, convertObject);\n\n    // amount is beeing turned into negative so the corresponding position has a negative amount property\n    formData.amount = parseFloat(formData.amount) * -1;\n\n    await makePosition(formData);\n\n    // sets form fields back to blank\n    setFormData({\n      crypto_currency: \"\",\n      amount: \"\",\n      date_of_purchase: \"\",\n    });\n\n    // reloads user object which is now updated with the deductable position\n    loadUserObj();\n  };\n\n  return (\n    <div className=\"form_container\">\n      <h3 className=\"large text-primary\">Deduct Crypto</h3>\n      <p className=\"lead\">Deduct cryptocurrency from your portfolio</p>\n      <form className=\"form\" onSubmit={(e) => onSubmit(e)}>\n        <div className=\"form-group\">\n          <div className=\"dropdown input_field\">\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n              }}\n            >\n              <div>Select a cryptocurrency</div>\n              <select\n                className=\"btn btn-outline-secondary\"\n                name=\"crypto_currency\"\n                style={{ position: \"absolute\", right: \"0\", width: \"50%\" }}\n                onChange={(e) => onChange(e)}\n              >\n                {currencyNames.map((currencyName) => {\n                  return (\n                    <option value={`${currencyName}`}>{currencyName}</option>\n                  );\n                })}\n              </select>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"form-group\">\n          <input\n            className=\"form-control input_field\"\n            type=\"number\"\n            placeholder=\"Amount\"\n            name=\"amount\"\n            value={amount}\n            onChange={(e) => onChange(e)}\n            required\n          />\n        </div>\n\n        {/* <div className=\"input-group input_field\">\n          <input\n            className=\"form-control\"\n            type=\"number\"\n            min=\"1\"\n            step=\"any\"\n            placeholder=\"Value of amount\"\n            name=\"price\"\n            value={price}\n            onChange={(e) => onChange(e)}\n            required\n          />\n          <div className=\"input-group-append\">\n            <select\n              id=\"deduct_select_fiat\"\n              className=\"btn btn-outline-secondary\"\n            >\n              <option value=\"EUR\">EUR</option>\n              <option value=\"USD\">USD</option>\n            </select>\n          </div>\n        </div> */}\n\n        <div className=\"form-group\">\n          <input\n            className=\"form-control input_field\"\n            type=\"date\"\n            name=\"date_of_purchase\"\n            value={date_of_purchase}\n            onChange={(e) => onChange(e)}\n            required\n          />\n        </div>\n\n        <input type=\"submit\" className=\"btn btn-primary\" value=\"Deduct\" />\n      </form>\n    </div>\n  );\n};\n\nexport default DeductCrypto;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/navbar/AccountIcon.js",["192"],"import React, { Fragment } from \"react\";\nimport Menu from \"./Menu\";\n\nconst AccountIcon = ({ logout, logedin }) => {\n  return (\n    <div id=\"account_nav_item\">\n      account\n      <div id=\"menu\">\n        <Menu logout={logout} logedin={logedin} />\n      </div>\n    </div>\n  );\n};\n\nexport default AccountIcon;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/auxiliary/auxiliaryCryptoData.js",["193","194","195","196","197"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/user.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/charts/TotalChart.js",["198"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/auth/Register.js",["199","200"],"import React, { useState } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\n\nconst Register = ({ logedin, register }) => {\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    password2: \"\",\n  });\n\n  const { firstname, lastname, email, password, password2 } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    register(email, password, password2);\n  };\n\n  // if some nasty user enters .../login in url --> redirect to landing page\n  // otherwhise the register form could be displayed to a logged in user\n  if (logedin) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <div className=\"form_container\">\n      <h3 className=\"large text-primary\">Sign Up</h3>\n      <p className=\"lead\">\n        <i className=\"fa fa-user auth_fa-user\"></i> Create your account\n      </p>\n      <form className=\"form\" onSubmit={(e) => onSubmit(e)}>\n        <div className=\"form-group\">\n          <input\n            className=\"form-control input_field\"\n            type=\"email\"\n            placeholder=\"Email Address\"\n            name=\"email\"\n            value={email}\n            onChange={(e) => onChange(e)}\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            className=\"form-control input_field\"\n            type=\"password\"\n            placeholder=\"Password\"\n            name=\"password\"\n            value={password}\n            onChange={(e) => onChange(e)}\n            minLength=\"6\"\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            className=\"form-control input_field\"\n            type=\"password\"\n            placeholder=\"Confirm Password\"\n            name=\"password2\"\n            value={password2}\n            onChange={(e) => onChange(e)}\n            minLength=\"6\"\n            required\n          />\n        </div>\n        <input type=\"submit\" className=\"btn btn-primary\" value=\"Register\" />\n      </form>\n      <p className=\"my-1\">\n        Already have an account? <Link to=\"/login\">Sign In</Link>\n      </p>\n    </div>\n  );\n};\n\nexport default Register;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/overview/Overview.js",["201","202","203","204"],"import React, { useState, useEffect, useRef } from \"react\";\nimport OverviewCurrencies from \"./OverviewCurrencies\";\nimport OverviewTotal from \"./OverviewTotal\";\nimport { getNamesAndCurrentValues } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getCurrentValue } from \"../../auxiliary/auxiliaryCryptoData\";\nimport { getInitialValue } from \"../../auxiliary/auxiliaryCryptoData\";\n\nconst Overview = ({\n  user,\n  cryptoCurrencies,\n  exchangeRates,\n  logedin,\n  renderOverview,\n  fiat,\n  fiatSymbol,\n  updateOriginAndCurrencyState,\n  toggleView,\n}) => {\n  const [\n    currencyNamesAndCurrentValues,\n    setCurrencyNamesAndCurrentValues,\n  ] = useState([]);\n\n  const [currentValueTotal, setCurrentValueTotal] = useState(0);\n\n  const [totalPurchase, setTotalPurchase] = useState(0);\n\n  useEffect(() => {\n    if (logedin) {\n      const namesAndCurrentValuesArr = getNamesAndCurrentValues(\n        user,\n        cryptoCurrencies\n      );\n\n      setCurrencyNamesAndCurrentValues(namesAndCurrentValuesArr);\n\n      const totalsArray = namesAndCurrentValuesArr.map(\n        ([currencyName, currencyValue]) =>\n          getCurrentValue(user, cryptoCurrencies, currencyName)\n      );\n\n      setCurrentValueTotal(totalsArray.reduce((a, b) => a + b, 0));\n\n      setTotalPurchase(getInitialValuePurchase());\n    }\n  }, [user, cryptoCurrencies, logedin, renderOverview]);\n\n  // these next lines of code preserve the previous currentValue over re-render\n  const prevCurrentValueTotal = useRef(0);\n\n  const prevCurrentValues = useRef({});\n\n  useEffect(() => {\n    prevCurrentValueTotal.current = currentValueTotal;\n    currencyNamesAndCurrentValues.map(([currencyName, currencyValue]) => {\n      const currVal = getCurrentValue(user, cryptoCurrencies, currencyName);\n      prevCurrentValues.current[currencyName] = currVal;\n    });\n  }, [currentValueTotal]);\n\n  // these next lines of code preserve the previous state of fiat (i.e. the fiat user had selected before current\n  const [fiatCurr, setFiatCurr] = useState(\"\");\n\n  const prevFiat = useRef({});\n\n  useEffect(() => {\n    setFiatCurr(fiat.current);\n  }, [fiat.current]);\n\n  useEffect(() => {\n    prevFiat.current = fiatCurr;\n  }, [fiatCurr]);\n\n  //\n\n  const getInitialValuePurchase = () => {\n    let sum = 0;\n    if (user)\n      user.positions.forEach((position) => {\n        sum += position[`price_${fiat.current}`];\n      });\n    return sum;\n  };\n\n  const get24hourChangeByCurrency = (currencyName) => {\n    let returnValue = 0;\n\n    if (cryptoCurrencies.data) {\n      cryptoCurrencies.data.forEach((el) => {\n        if (el.id === currencyName) {\n          returnValue = el.price_change_percentage_24h;\n        }\n      });\n    }\n    return returnValue;\n  };\n\n  const get24hourChangeTotal = () => {\n    let sum = 0;\n    currencyNamesAndCurrentValues.forEach((arr) => {\n      sum +=\n        (get24hourChangeByCurrency(arr[0]) *\n          getCurrentValue(user, cryptoCurrencies, arr[0])) /\n        100;\n    });\n\n    return sum;\n  };\n\n  const handleClick = (origin, currency) => {\n    toggleView();\n    currency === \"all_currencies\"\n      ? updateOriginAndCurrencyState(origin, currency)\n      : updateOriginAndCurrencyState(origin, `${currency}_${fiat.current}`);\n  };\n\n  return (\n    <div>\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Crypto</th>\n            <th scope=\"col\">Amount</th>\n            <th scope=\"col\">Initial Value</th>\n            <th scope=\"col\">Current Value</th>\n            <th scope=\"col\">Profit</th>\n            <th scope=\"col\">ROI</th>\n            <th scope=\"col\">Last 7 Days</th>\n          </tr>\n        </thead>\n        <OverviewCurrencies\n          user={user}\n          cryptoCurrencies={cryptoCurrencies}\n          exchangeRates={exchangeRates}\n          currencyNamesAndCurrentValues={currencyNamesAndCurrentValues}\n          prevCurrentValues={prevCurrentValues}\n          logedin={logedin}\n          fiat={fiat}\n          prevFiat={prevFiat}\n          fiatSymbol={fiatSymbol}\n          getInitialValue={getInitialValue}\n          get24hourChangeByCurrency={get24hourChangeByCurrency}\n          getCurrentValue={getCurrentValue}\n          handleClick={handleClick}\n        />\n        <OverviewTotal\n          user={user}\n          cryptoCurrencies={cryptoCurrencies}\n          exchangeRates={exchangeRates}\n          totalPurchase={totalPurchase}\n          currentValueTotal={currentValueTotal}\n          prevCurrentValueTotal={prevCurrentValueTotal}\n          fiat={fiat}\n          prevFiat={prevFiat}\n          fiatSymbol={fiatSymbol}\n          get24hourChangeTotal={get24hourChangeTotal}\n          handleClick={handleClick}\n        />\n      </table>\n    </div>\n  );\n};\n\nexport default Overview;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/navbar/Navbar.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/App.js",["205","206"],"import React, { Fragment, useState, useEffect, useRef } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { createPosition } from \"./actions/positions\";\nimport { getCurrenciesNames } from \"./auxiliary/auxiliaryCryptoData\";\nimport { getLatestCryptoData } from \"./actions/currencies\";\nimport { loadUser } from \"./auxiliary/auxiliaryUserData\";\nimport { signin } from \"./auxiliary/auxiliaryUserData\";\nimport { signout } from \"./auxiliary/auxiliaryUserData\";\nimport { signup } from \"./auxiliary/auxiliaryUserData\";\nimport { getFiatExchangeRates } from \"./actions/currencies\";\nimport { getCurrentDate } from \"./auxiliary/auxiliaryDateData\";\n\nimport Navbar from \"./components/navbar/Navbar\";\nimport Landing from \"./components/layout/Landing\";\nimport Login from \"./components/auth/Login\";\nimport Register from \"./components/auth/Register\";\n\nimport AddCrypto from \"./components/input/AddCrypto\";\nimport DeductCrypto from \"./components/input/DeductCrypto\";\n\nimport Position from \"./components/positions/Position\";\nimport PositionChart from \"./components/positions/PositionChart\";\n\nimport Alert from \"./components/layout/Alert\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const [user, setUser] = useState({});\n\n  const [logedin, setLogedin] = useState(false);\n\n  const [alert, setAlert] = useState({});\n\n  const [cryptoCurrencies, setCryptoCurrencies] = useState({});\n\n  const [exchangeRates, setExchangeRate] = useState({});\n\n  const fiat = useRef(\"EUR\");\n\n  const fiatSymbol = useRef(\"€\");\n\n  useEffect(() => {\n    loadUserObj();\n  }, []);\n\n  useEffect(() => {\n    updateCryptoCurrenciesState();\n    updateExchangeRateState();\n  }, [logedin]);\n\n  const updateCryptoCurrenciesState = async () => {\n    if (logedin) {\n      const currencyNames = getCurrenciesNames(user);\n\n      setInterval(() => {\n        update();\n      }, 120000);\n\n      const update = async () => {\n        const crypto = await getLatestCryptoData(currencyNames, fiat.current);\n        if (crypto instanceof Error) {\n          // triggerAlert(\"Something went wrong\", \"danger\");\n          triggerAlert(crypto.message, \"danger\");\n        } else {\n          setCryptoCurrencies(crypto);\n        }\n      };\n\n      update();\n    }\n  };\n\n  const updateExchangeRateState = async () => {\n    const date = getCurrentDate();\n\n    const exchangeObj = await getFiatExchangeRates(date);\n\n    if (exchangeObj instanceof Error) {\n      triggerAlert(exchangeObj.message, \"danger\");\n    } else {\n      setExchangeRate(exchangeObj);\n    }\n  };\n\n  const setFiatCurrency = (e) => {\n    fiat.current = e.target.value;\n\n    switch (e.target.value) {\n      case \"EUR\":\n        fiatSymbol.current = \"€\";\n        break;\n      case \"USD\":\n        fiatSymbol.current = \"$\";\n        break;\n      default:\n    }\n\n    updateCryptoCurrenciesState();\n  };\n\n  const makePosition = async (formData) => {\n    const position = await createPosition(formData);\n    if (position instanceof Error) {\n      triggerAlert(position.response.data.errors.msg, \"danger\");\n    } else {\n      position.data.amount < 0\n        ? triggerAlert(\"Amount deducted\", \"success\")\n        : triggerAlert(\"Position added\", \"success\");\n      setUser({ ...user.positions.unshift(position.data) });\n      updateCryptoCurrenciesState();\n    }\n  };\n\n  const login = async (email, password) => {\n    const token = await signin(email, password);\n    if (token instanceof Error) {\n      triggerAlert(token.response.data.errors.msg, \"danger\");\n    } else {\n      loadUserObj();\n    }\n  };\n\n  const loadUserObj = async () => {\n    const userObj = await loadUser();\n    if (userObj instanceof Error) {\n      triggerAlert(userObj.response.data.errors.msg, \"danger\");\n      return;\n    } else if (userObj) {\n      setUser(userObj);\n      setLogedin(true);\n    }\n  };\n\n  const logout = () => {\n    signout();\n    setUser({});\n    setLogedin(false);\n  };\n\n  const register = (email, password, password2) => {\n    const token = signup(email, password, password2);\n    if (token instanceof Error) {\n      triggerAlert(token.response.data.errors.msg, \"danger\");\n    } else {\n      loadUser();\n    }\n  };\n\n  const triggerAlert = (msg, alertType) => {\n    setAlert({\n      message: msg,\n      type: alertType,\n    });\n    setTimeout(() => setAlert({}), 20000);\n  };\n\n  const removeAlert = () => setAlert({});\n\n  return (\n    <Router>\n      <Fragment>\n        <Navbar\n          logout={logout}\n          logedin={logedin}\n          setFiatCurrency={setFiatCurrency}\n        />\n        <Alert alert={alert} removeAlert={removeAlert} />\n        <Switch>\n          {logedin && (\n            <Route\n              exact\n              path=\"/\"\n              render={() => (\n                <Landing\n                  user={user}\n                  cryptoCurrencies={cryptoCurrencies}\n                  exchangeRates={exchangeRates}\n                  logedin={logedin}\n                  fiat={fiat}\n                  fiatSymbol={fiatSymbol}\n                  triggerAlert={triggerAlert}\n                />\n              )}\n            />\n          )}\n          <Route exact path=\"/position\" render={() => <Position />} />\n          <Route\n            exact\n            path=\"/position_chart\"\n            render={() => <PositionChart />}\n          />\n\n          <Route\n            exact\n            path=\"/login\"\n            render={() => <Login login={login} logedin={logedin} />}\n          />\n          <Route\n            exact\n            path=\"/register\"\n            render={() => <Register register={register} logedin={logedin} />}\n          />\n          {logedin && (\n            <Route\n              exact\n              path=\"/add_crypto\"\n              render={() => (\n                <AddCrypto\n                  makePosition={makePosition}\n                  loadUserObj={loadUserObj}\n                  triggerAlert={triggerAlert}\n                />\n              )}\n            />\n          )}\n\n          {logedin && (\n            <Route\n              exact\n              path=\"/deduct_crypto\"\n              render={() => (\n                <DeductCrypto\n                  makePosition={makePosition}\n                  loadUserObj={loadUserObj}\n                  triggerAlert={triggerAlert}\n                  user={user}\n                />\n              )}\n            />\n          )}\n        </Switch>\n      </Fragment>\n    </Router>\n  );\n};\n\nexport default App;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/actions/auth.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/charts/SparkLine.js",["207"],"import React, { useState, useEffect } from \"react\";\nimport SparkLineCharts from \"./SparkLineCharts\";\nimport { getAmount } from \"../../auxiliary/auxiliaryCryptoData\";\n\nconst SparkLine = ({ user, cryptoCurrencies, currencyName }) => {\n  const [sparkLineData, setSparkLineData] = useState([]);\n\n  useEffect(() => {\n    getSparkLineData();\n  }, [cryptoCurrencies]);\n\n  const getSparkLineData = () => {\n    // not all 7d price arrays as returned by the api have the same length --> this results in the last values of the calculated total price array being too low\n    // this makes sure that all the indivual currency arrays from which totals are beeing calculated have the same length\n    // (which corresponds with the length of the shortest array)\n    // console.log(\"user\");\n    // console.log(user);\n    // console.log(\"cryptoCurrencies\");\n    // console.log(cryptoCurrencies);\n\n    if (\n      Object.keys(cryptoCurrencies).length > 0 &&\n      cryptoCurrencies.data.length > 0\n    ) {\n      let lengthArr = [];\n\n      // gets lenghts of 7d price array\n      cryptoCurrencies.data.forEach((obj, index) => {\n        lengthArr[index] = obj.sparkline_in_7d.price.length;\n      });\n\n      // get length of shortest 7d price array\n      const minLength = Math.min(...lengthArr);\n\n      // get length of longest 7d price array\n      const maxLength = Math.max(...lengthArr);\n\n      // sets array sparkLineCurrentValues to length of longest 7d price array\n      let sparkLineCurrentValues = new Array(maxLength).fill(0);\n\n      if (Object.keys(cryptoCurrencies).length > 0) {\n        cryptoCurrencies.data.forEach((obj) => {\n          // individual currency\n          if (currencyName) {\n            if (obj.id === currencyName) {\n              obj.sparkline_in_7d.price.forEach((price, index) => {\n                sparkLineCurrentValues[index] +=\n                  price * getAmount(user, obj.id);\n              });\n            }\n            // total\n          } else {\n            obj.sparkline_in_7d.price.forEach((price, index) => {\n              sparkLineCurrentValues[index] += price * getAmount(user, obj.id);\n            });\n          }\n        });\n\n        // sets result array of sparkline value to the length of the shortes 7d price array\n        sparkLineCurrentValues.length = minLength;\n\n        setSparkLineData(sparkLineCurrentValues);\n      }\n    }\n  };\n\n  const getX_axisArray = () => {\n    let Xaxis = [];\n    if (sparkLineData) {\n      Xaxis = new Array(sparkLineData.length).fill(\"\");\n    }\n    return Xaxis;\n  };\n\n  const checkLineColor = () => {\n    if (sparkLineData) {\n      return sparkLineData[sparkLineData.length - 1] - sparkLineData[0] > 0\n        ? \"green\"\n        : \"red\";\n    }\n  };\n\n  return (\n    <div style={{ width: \"10rem\" }}>\n      <SparkLineCharts\n        sparkLineData={sparkLineData}\n        getX_axisArray={getX_axisArray}\n        checkLineColor={checkLineColor}\n      />\n    </div>\n  );\n};\n\nexport default SparkLine;\n","/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/charts/SparkLineCharts.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/components/navbar/Fiat.js",[],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/auxiliary/auxiliaryDateData.js",[],["208","209"],"/home/theironduke/WEB_DEV/OWN_PROJECTS/crypto_currency_investment_portfolio_viewer/frontend/src/auxiliary/auxiliaryFiatData.js",[],{"ruleId":"210","replacedBy":"211"},{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","severity":1,"message":"215","line":47,"column":6,"nodeType":"216","endLine":47,"endColumn":37,"suggestions":"217"},{"ruleId":"214","severity":1,"message":"218","line":51,"column":6,"nodeType":"216","endLine":51,"endColumn":20,"suggestions":"219"},{"ruleId":"210","replacedBy":"220"},{"ruleId":"212","replacedBy":"221"},{"ruleId":"210","replacedBy":"222"},{"ruleId":"212","replacedBy":"223"},{"ruleId":"214","severity":1,"message":"224","line":45,"column":6,"nodeType":"216","endLine":45,"endColumn":8,"suggestions":"225"},{"ruleId":"214","severity":1,"message":"226","line":57,"column":6,"nodeType":"216","endLine":57,"endColumn":20,"suggestions":"227"},{"ruleId":"228","severity":1,"message":"229","line":104,"column":43,"nodeType":"230","messageId":"231","endLine":104,"endColumn":45},{"ruleId":"232","severity":1,"message":"233","line":105,"column":19,"nodeType":"234","messageId":"235","endLine":105,"endColumn":22},{"ruleId":"214","severity":1,"message":"236","line":161,"column":6,"nodeType":"216","endLine":161,"endColumn":47,"suggestions":"237"},{"ruleId":"238","severity":1,"message":"239","line":164,"column":5,"nodeType":"240","messageId":"241","endLine":173,"endColumn":6},{"ruleId":"214","severity":1,"message":"242","line":14,"column":6,"nodeType":"216","endLine":14,"endColumn":17,"suggestions":"243"},{"ruleId":"210","replacedBy":"244"},{"ruleId":"212","replacedBy":"245"},{"ruleId":"210","replacedBy":"246"},{"ruleId":"212","replacedBy":"247"},{"ruleId":"214","severity":1,"message":"226","line":49,"column":6,"nodeType":"216","endLine":49,"endColumn":20,"suggestions":"248"},{"ruleId":"249","severity":1,"message":"250","line":211,"column":11,"nodeType":"251","endLine":211,"endColumn":28},{"ruleId":"210","replacedBy":"252"},{"ruleId":"212","replacedBy":"253"},{"ruleId":"214","severity":1,"message":"254","line":21,"column":6,"nodeType":"216","endLine":21,"endColumn":8,"suggestions":"255"},{"ruleId":"214","severity":1,"message":"256","line":35,"column":6,"nodeType":"216","endLine":35,"endColumn":25,"suggestions":"257"},{"ruleId":"214","severity":1,"message":"218","line":39,"column":6,"nodeType":"216","endLine":39,"endColumn":20,"suggestions":"258"},{"ruleId":"259","severity":1,"message":"260","line":10,"column":28,"nodeType":"261","messageId":"262","endLine":10,"endColumn":30},{"ruleId":"214","severity":1,"message":"263","line":13,"column":6,"nodeType":"216","endLine":13,"endColumn":8,"suggestions":"264"},{"ruleId":"210","replacedBy":"265"},{"ruleId":"212","replacedBy":"266"},{"ruleId":"214","severity":1,"message":"267","line":24,"column":6,"nodeType":"216","endLine":24,"endColumn":8,"suggestions":"268"},{"ruleId":"232","severity":1,"message":"269","line":1,"column":17,"nodeType":"234","messageId":"235","endLine":1,"endColumn":25},{"ruleId":"228","severity":1,"message":"229","line":61,"column":35,"nodeType":"230","messageId":"231","endLine":61,"endColumn":37},{"ruleId":"270","severity":1,"message":"271","line":97,"column":29,"nodeType":"272","messageId":"273","endLine":97,"endColumn":45},{"ruleId":"270","severity":1,"message":"274","line":104,"column":29,"nodeType":"272","messageId":"273","endLine":104,"endColumn":45},{"ruleId":"232","severity":1,"message":"275","line":161,"column":7,"nodeType":"234","messageId":"235","endLine":161,"endColumn":20},{"ruleId":"228","severity":1,"message":"229","line":181,"column":33,"nodeType":"230","messageId":"231","endLine":181,"endColumn":35},{"ruleId":"214","severity":1,"message":"276","line":20,"column":6,"nodeType":"216","endLine":20,"endColumn":26,"suggestions":"277"},{"ruleId":"232","severity":1,"message":"278","line":11,"column":11,"nodeType":"234","messageId":"235","endLine":11,"endColumn":20},{"ruleId":"232","severity":1,"message":"279","line":11,"column":22,"nodeType":"234","messageId":"235","endLine":11,"endColumn":30},{"ruleId":"214","severity":1,"message":"280","line":46,"column":6,"nodeType":"216","endLine":46,"endColumn":55,"suggestions":"281"},{"ruleId":"228","severity":1,"message":"229","line":55,"column":71,"nodeType":"230","messageId":"231","endLine":55,"endColumn":73},{"ruleId":"214","severity":1,"message":"282","line":59,"column":6,"nodeType":"216","endLine":59,"endColumn":25,"suggestions":"283"},{"ruleId":"214","severity":1,"message":"284","line":68,"column":6,"nodeType":"216","endLine":68,"endColumn":20,"suggestions":"285"},{"ruleId":"214","severity":1,"message":"286","line":46,"column":6,"nodeType":"216","endLine":46,"endColumn":8,"suggestions":"287"},{"ruleId":"214","severity":1,"message":"288","line":51,"column":6,"nodeType":"216","endLine":51,"endColumn":15,"suggestions":"289"},{"ruleId":"214","severity":1,"message":"290","line":10,"column":6,"nodeType":"216","endLine":10,"endColumn":24,"suggestions":"291"},{"ruleId":"210","replacedBy":"292"},{"ruleId":"212","replacedBy":"293"},"no-native-reassign",["294"],"no-negated-in-lhs",["295"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fiat', 'prevCurrentValues', and 'prevFiat'. Either include them or remove the dependency array.","ArrayExpression",["296"],"React Hook useEffect has a missing dependency: 'calcChange'. Either include it or remove the dependency array. Mutable values like 'fiat.current' aren't valid dependencies because mutating them doesn't re-render the component.",["297"],["294"],["295"],["294"],["295"],"React Hook useEffect has a missing dependency: 'origin'. Either include it or remove the dependency array.",["298"],"React Hook useEffect has missing dependencies: 'currency', 'fiat', and 'origin'. Either include them or remove the dependency array. Mutable values like 'fiat.current' aren't valid dependencies because mutating them doesn't re-render the component.",["299"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'key' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'currency', 'fiat', and 'positions'. Either include them or remove the dependency array.",["300"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'get24hMax' and 'get24hMin'. Either include them or remove the dependency array.",["301"],["294"],["295"],["294"],["295"],["302"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["294"],["295"],"React Hook useEffect has missing dependencies: 'data.state.currency' and 'data.state.date_of_purchase'. Either include them or remove the dependency array.",["303"],"React Hook useEffect has missing dependencies: 'fiat', 'prevCurrentValueTotal', and 'prevFiat'. Either include them or remove the dependency array.",["304"],["305"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'data.current_price'. Either include it or remove the dependency array.",["306"],["294"],["295"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["307"],"'Fragment' is defined but never used.","no-self-assign","'sort[element][1]' is assigned to itself.","MemberExpression","selfAssignment","'sort[element][2]' is assigned to itself.","'checkDuration' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'duration', 'logedin', and 'upDateMarketChartState'. Either include them or remove the dependency array. Mutable values like 'fiat.current' aren't valid dependencies because mutating them doesn't re-render the component.",["308"],"'firstname' is assigned a value but never used.","'lastname' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getInitialValuePurchase'. Either include it or remove the dependency array.",["309"],"React Hook useEffect has missing dependencies: 'cryptoCurrencies', 'currencyNamesAndCurrentValues', and 'user'. Either include them or remove the dependency array.",["310"],"React Hook useEffect has a missing dependency: 'fiat'. Either include it or remove the dependency array. Mutable values like 'fiat.current' aren't valid dependencies because mutating them doesn't re-render the component.",["311"],"React Hook useEffect has a missing dependency: 'loadUserObj'. Either include it or remove the dependency array.",["312"],"React Hook useEffect has missing dependencies: 'updateCryptoCurrenciesState' and 'updateExchangeRateState'. Either include them or remove the dependency array.",["313"],"React Hook useEffect has a missing dependency: 'getSparkLineData'. Either include it or remove the dependency array.",["314"],["294"],["295"],"no-global-assign","no-unsafe-negation",{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"321","fix":"327"},{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"317","fix":"332"},{"desc":"333","fix":"334"},{"desc":"335","fix":"336"},{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},"Update the dependencies array to be: [currencyNamesAndCurrentValues, fiat, prevCurrentValues, prevFiat]",{"range":"351","text":"352"},"Update the dependencies array to be: [calcChange]",{"range":"353","text":"354"},"Update the dependencies array to be: [origin]",{"range":"355","text":"356"},"Update the dependencies array to be: [currency, fiat, origin]",{"range":"357","text":"358"},"Update the dependencies array to be: [nameArray, currentMarketChart, duration, currency, positions, fiat]",{"range":"359","text":"360"},"Update the dependencies array to be: [dataArray, get24hMax, get24hMin]",{"range":"361","text":"362"},{"range":"363","text":"358"},"Update the dependencies array to be: [data.state.currency, data.state.date_of_purchase]",{"range":"364","text":"365"},"Update the dependencies array to be: [currentValueTotal, fiat, prevCurrentValueTotal, prevFiat]",{"range":"366","text":"367"},{"range":"368","text":"354"},"Update the dependencies array to be: [data.current_price]",{"range":"369","text":"370"},"Update the dependencies array to be: [user]",{"range":"371","text":"372"},"Update the dependencies array to be: [user, logedin, upDateMarketChartState, duration]",{"range":"373","text":"374"},"Update the dependencies array to be: [user, cryptoCurrencies, logedin, renderOverview, getInitialValuePurchase]",{"range":"375","text":"376"},"Update the dependencies array to be: [cryptoCurrencies, currencyNamesAndCurrentValues, currentValueTotal, user]",{"range":"377","text":"378"},"Update the dependencies array to be: [fiat]",{"range":"379","text":"380"},"Update the dependencies array to be: [loadUserObj]",{"range":"381","text":"382"},"Update the dependencies array to be: [logedin, updateCryptoCurrenciesState, updateExchangeRateState]",{"range":"383","text":"384"},"Update the dependencies array to be: [cryptoCurrencies, getSparkLineData]",{"range":"385","text":"386"},[1597,1628],"[currencyNamesAndCurrentValues, fiat, prevCurrentValues, prevFiat]",[1675,1689],"[calcChange]",[1297,1299],"[origin]",[1582,1596],"[currency, fiat, origin]",[5892,5933],"[nameArray, currentMarketChart, duration, currency, positions, fiat]",[568,579],"[dataArray, get24hMax, get24hMin]",[1686,1700],[590,592],"[data.state.currency, data.state.date_of_purchase]",[1147,1166],"[currentValueTotal, fiat, prevCurrentValueTotal, prevFiat]",[1213,1227],[423,425],"[data.current_price]",[848,850],"[user]",[456,476],"[user, logedin, upDateMarketChartState, duration]",[1305,1354],"[user, cryptoCurrencies, logedin, renderOverview, getInitialValuePurchase]",[1820,1839],"[cryptoCurrencies, currencyNamesAndCurrentValues, currentValueTotal, user]",[2094,2108],"[fiat]",[1574,1576],"[loadUserObj]",[1671,1680],"[logedin, updateCryptoCurrenciesState, updateExchangeRateState]",[341,359],"[cryptoCurrencies, getSparkLineData]"]